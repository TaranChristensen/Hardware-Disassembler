00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/13/2016 9:31:11 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : IO
00000000                             3  * Written by : Circles
00000000                             4  * Date       : ##/##/16
00000000                             5  * Description: Input Output File
00000000                             6  *-----------------------------------------------------------
00000000  47F9 000007BE              7                  LEA     COUNTER,A3         initialize the COUNTER variable
00000006  26BC 00000000              8                  MOVE.L  #0,(A3)            clear the variable
0000000C                             9                  
0000000C                            10  *-------Code for output-------
0000000C                            11  
0000000C  0693 00000016             12  IOINTRO         ADD.L   #$00000016,(A3)    COUNTER++
00000012  43F9 00000264             13                  LEA     IntroMsg,A1        Display the intro
00000018  103C 000E                 14                  MOVE.B  #14, D0
0000001C  4E4F                      15                  TRAP    #15
0000001E                            16                  
0000001E  43F9 00000461             17                  LEA     Intro2,A1        Display the intro
00000024  103C 000E                 18                  MOVE.B  #14, D0
00000028  4E4F                      19                  TRAP    #15
0000002A                            20  
0000002A  43F9 00000632             21  IOLOOP          LEA     HexStart,A1        Display the prompt and loop it
00000030  103C 000E                 22                  MOVE.B  #14,D0          
00000034  4E4F                      23                  TRAP    #15   
00000036  5493                      24                  ADD.L   #$00000002,(A3)    COUNTER++ COUNTER++
00000038                            25  
00000038                            26  *-------Code for input-------
00000038                            27  
00000038  43F9 00000100             28                  LEA     IOStringLoc,A1     Store the string of our user input at StartAddress,A1 
0000003E  103C 0002                 29                  MOVE.B  #2,D0              uses Trap #15, Task 2
00000042  4E4F                      30                  TRAP    #15              
00000044                            31          
00000044  4284                      32                  CLR.L   D4                 Ensure our counter (D4) is 0 
00000046                            33  
00000046  4EB9 00000088             34                  JSR     LENGTH_CHECK 
0000004C  4282                      35                  CLR.L   D2  
0000004E  BA3C 0001                 36                  CMP.B   #1,D5              if 1 then it passed the tests         
00000052                            37                  
00000052  6700 00A0                 38                  BEQ     IOASCIItoHEX
00000056  60D2                      39                  BRA     IOLOOP
00000058                            40                  
00000058  0C93 0000001F             41  CHECK31         CMP.L   #$0000001F,(A3)    compare the counter to 29
0000005E  6E00 0004                 42                  BGT     ENTERCHECK         counter is at at least 30
00000062  4E75                      43                  RTS                        counter is still low
00000064                            44  
00000064  4280                      45  ENTERCHECK      CLR.L   D0
00000066  43F9 000006F3             46                  LEA     ENTERPROMPT,A1     display the enter prompt
0000006C  103C 000E                 47                  MOVE.B  #14,D0
00000070  4E4F                      48                  TRAP    #15
00000072                            49                  
00000072  227C 00002000             50                  MOVE.L  #$2000,A1  
00000078                            51  
00000078  103C 0002                 52                  MOVE.B  #2,D0              wait for the user to hit enter
0000007C  4E4F                      53                  TRAP    #15
0000007E                            54                  
0000007E  26BC 00000000             55                  MOVE.L  #0,(A3)            clear the counter
00000084  5293                      56                  ADD.L   #$00000001,(A3)    COUNTER++
00000086                            57               
00000086  4E75                      58                  RTS
00000088                            59                  
00000088  4285                      60  LENGTH_CHECK    CLR.L   D5                 store the result of the test
0000008A  7C00                      61                  MOVEQ   #$0,D6             make D6 0
0000008C  B206                      62                  CMP.B   D6,D1              see if null
0000008E  6700 0010                 63                  BEQ     BAD_LENGTH         if null then branch to bad input
00000092  0C41 0008                 64                  CMPI    #$8,D1             see if it is more than 8 characters long
00000096  6E00 0008                 65                  BGT     BAD_LENGTH         if more than 8 branch to bad input
0000009A  1A3C 0001                 66                  MOVE.B  #$1,D5             passed the length checks so move 1
0000009E  4E75                      67                  RTS                        go back
000000A0                            68                  
000000A0  7A00                      69  BAD_LENGTH      MOVEQ   #$0,D5             did not pass the test
000000A2  43F9 000006AD             70                  LEA     FAIL_INPUT,A1      load bad input message
000000A8  103C 000E                 71                  MOVE.B  #14,D0          
000000AC  4E4F                      72                  TRAP    #15 
000000AE  5293                      73                  ADD.L   #$00000001,(A3)    COUNTER++
000000B0  4E75                      74                  RTS                        go back
000000B2                            75                  
000000B2  43F9 00000735             76  STARTLESSTHNEND LEA     STARTGTEND,A1      load the error 
000000B8  103C 000E                 77                  MOVE.B  #14,D0
000000BC  4E4F                      78                  TRAP    #15
000000BE  5293                      79                  ADD.L   #$00000001,(A3)    COUNTER++
000000C0  6000 FF68                 80                  BRA     IOLOOP             go back to the start
000000C4                            81  
000000C4                            82  
000000C4  4286                      83  TEST_ODD        CLR.L   D6           
000000C6  4285                      84                  CLR.L   D5
000000C8  7A02                      85                  MOVE.L  #$00000002,D5      divide by 2 to see remainder
000000CA  3C02                      86                  MOVE.W  D2,D6              create a copy of the input in D6
000000CC  8CC5                      87                  DIVU    D5,D6              divide the hex number by 2
000000CE                            88                  
000000CE  4846                      89                  SWAP    D6                 put the remainder on the far right
000000D0                            90                  
000000D0  BC3C 0001                 91                  CMP.B   #1,D6              see if the remainder is one
000000D4  6700 0008                 92                  BEQ     BAD_EVEN           branch to bad even
000000D8                            93              
000000D8  4286                      94                  CLR.L   D6
000000DA  4285                      95                  CLR.L   D5
000000DC                            96   
000000DC  4E75                      97                  RTS       
000000DE                            98                  
000000DE  4285                      99  BAD_EVEN        CLR.L   D5
000000E0  4286                     100                  CLR.L   D6
000000E2  43F9 000006AD            101                  LEA     FAIL_INPUT,A1      load bad input message  
000000E8  103C 000E                102                  MOVE.B  #14,D0          
000000EC  4E4F                     103                  TRAP    #15 
000000EE  5293                     104                  ADD.L   #$00000001,(A3)    COUNTER++
000000F0  6000 FF38                105                  BRA     IOLOOP             go back to the beginning
000000F4                           106                  
000000F4                           107  *-------Code for the starting address-------
000000F4                           108  
000000F4  5244                     109  IOASCIItoHEX    ADDQ    #1,D4
000000F6  E98A                     110                  LSL.L   #4,D2              Scoot D2 a nybble
000000F8  1619                     111                  MOVE.B  (A1)+,D3           Move a Byte from A1's address to D3
000000FA  0403 0030                112                  SUB.B   #48,D3             Sub 48 to turn ASCII 0 into binary 0
000000FE  B63C 0009                113                  CMP.B   #9,D3              If our number is greater than 9..
00000102  6F02                     114                  BLE.S   IOORTAG            .. it must be a character; A-F: 
00000104  5F03                     115                  SUB.B   #7,D3              Sub 7 to turn A into 10
00000106  8403                     116  IOORTAG         OR.B    D3,D2              Store our nybble into D2
00000108  B204                     117                  CMP.B   D4,D1              See if we've read all the characters
0000010A  66E8                     118                  BNE.S   IOASCIItoHEX       Continue if we haven't
0000010C                           119              
0000010C                           120              
0000010C  23FC 00000000 000007B6   121                  MOVE.L  #0,StartAddress
00000116  23C2 000007B6            122                  MOVE.L  D2,StartAddress    Store our StartAddress
0000011C                           123                  
0000011C  4EB8 00C4                124                  JSR     TEST_ODD           test if the address is odd
00000120                           125                  
00000120  4281                     126                  CLR.L   D1
00000122  4282                     127                  CLR.L   D2
00000124                           128  
00000124                           129  *-------Code for the ending address-------
00000124                           130  
00000124  43F9 0000064F            131  ENDLOOP         LEA     HexEnd,A1          load the ending address prompt
0000012A  103C 000E                132                  MOVE.B  #14,D0
0000012E  4E4F                     133                  TRAP    #15  
00000130  5493                     134                  ADD.L   #$00000002,(A3)
00000132                           135                  
00000132  43F9 00000100            136                  LEA     IOStringLoc,A1     Store the string of our user input at StartAddress,A1 
00000138  103C 0002                137                  MOVE.B  #2,D0              uses Trap #15, Task 2
0000013C  4E4F                     138                  TRAP    #15              
0000013E                           139          
0000013E  4284                     140                  CLR.L   D4                 Ensure our counter (D4) is 0 
00000140                           141  
00000140  4EB8 0088                142                  JSR     LENGTH_CHECK       check to make sure the length is ok
00000144  BA3C 0001                143                  CMP.B   #1,D5              if 1 then it passed the tests         
00000148                           144  
00000148  6700 0004                145                  BEQ     IOASCIItoHEX2      convert to hex
0000014C  60D6                     146                  BRA     ENDLOOP
0000014E                           147                  
0000014E  5244                     148  IOASCIItoHEX2   ADDQ    #1,D4
00000150  E98A                     149                  LSL.L   #4,D2              Scoot D2 a nybble
00000152  1619                     150                  MOVE.B  (A1)+,D3           Move a Byte from A1's address to D3
00000154  0403 0030                151                  SUB.B   #48,D3             Sub 48 to turn ASCII 0 into binary 0
00000158  B63C 0009                152                  CMP.B   #9,D3              If our number is greater than 9..
0000015C  6F02                     153                  BLE.S   IOORTAG2           .. it must be a character; A-F: 
0000015E  5F03                     154                  SUB.B   #7,D3              Sub 7 to turn A into 10
00000160  8403                     155  IOORTAG2        OR.B    D3,D2              Store our nybble into D2
00000162  B204                     156                  CMP.B   D4,D1              See if we've read all the characters
00000164  66E8                     157                  BNE.S   IOASCIItoHEX2      Continue if we haven't
00000166                           158              
00000166                           159    
00000166  23FC 00000000 000007BA   160                  MOVE.L  #0,EndingAddress
00000170  23C2 000007BA            161                  MOVE.L  D2,EndingAddress   Store our EndingAddress
00000176                           162                  
00000176  4EB8 00C4                163                  JSR     TEST_ODD           tezt if the ending address is odd
0000017A                           164                  
0000017A  2479 000007B6            165                  MOVE.L  StartAddress,A2    Push our start address into A2
00000180                           166                  
00000180  B5F9 000007BA            167                  CMP.L   EndingAddress,A2   compare the ending address with the startingaddress
00000186  6E00 FF2A                168                  BGT     STARTLESSTHNEND    branch if the starting is greater than the ending
0000018A                           169                  
0000018A  4281                     170                  CLR.L   D1
0000018C                           171                  
0000018C  2479 000007B6            172                  MOVE.L  StartAddress,A2    Push our start address into A2 
00000192                           173                  
00000192                           174  *-------Output Opcode------- 
00000192                           175  
00000192  23FC 00000000 00000100   176  OUTPUTOPCODE    MOVE.L  #0,IOStringLoc     ********** Testing purposes ********** 
0000019C  4281                     177                  CLR.L   D1
0000019E                           178          
0000019E                           179  
0000019E  43F9 00000100            180                  LEA     IOStringLoc,A1     Load our IOStringLoc into A1 for string contruction purposes
000001A4                           181          
000001A4  2C0A                     182                  MOVE.L  A2,D6
000001A6  4244                     183                  CLR     D4
000001A8  4846                     184                  SWAP    D6
Line 185 ERROR: Undefined symbol
000001AA  4EB9 004DBB8E            185                  JSR     EAHEXtoASCII
000001B0  4244                     186                  CLR     D4
000001B2  4846                     187                  SWAP    D6
Line 188 ERROR: Undefined symbol
000001B4  4EB9 004DBB8E            188                  JSR     EAHEXtoASCII
000001BA  22FC 20202020            189                  MOVE.L  #'    ',(A1)+      Add a spacer into our IOStringLoc
000001C0  32FC 2020                190                  MOVE.W  #'  ',(A1)+      Add a spacer into our IOStringLoc
000001C4  5C41                     191                  ADDQ    #6,D1              We added 4 bytes, aka 4 spaces
000001C6                           192          
Line 193 ERROR: Undefined symbol
000001C6  4EB9 004DBB8E            193                  JSR OPGETCODE              Get the OpCode pointed at by A2, it's string stored in IOStringLoc
000001CC                           194                  
000001CC  43F9 00000100            195                  LEA     IOStringLoc,A1     Now that we've populated the string, load it's beginning
000001D2  103C 0001                196                  MOVE.B  #1,D0              Trap task 1 prints a string at A1 with #D1 bytes.
000001D6  4E4F                     197                  TRAP    #15           
000001D8                           198          
000001D8  43F9 0000066B            199                  LEA     SPC,A1             Puts the space before the opCode
000001DE  103C 000D                200                  MOVE.B  #13,D0
000001E2  4E4F                     201                  TRAP    #15
000001E4                           202                  
000001E4  5293                     203                  ADD.L   #$00000001,(A3)    COUNTER++
000001E6  4EB8 0058                204                  JSR     CHECK31
000001EA                           205                  
000001EA  B5F9 000007BA            206                  CMP.L   EndingAddress,A2   compare the current address with the ending address
000001F0  6DA0                     207                  BLT     OUTPUTOPCODE       if the current is less than the ending keep looping
000001F2                           208  
000001F2                           209  *-------Output User Input------- 
000001F2                           210  
000001F2                           211                  ; The following outputs the input, converting what we've saved in HEX to ASCII
000001F2                           212                  ; We won't need this in the final version, but the below code should be handy
000001F2                           213                  ;  for print out EA values
000001F2  2439 000007B6            214                  MOVE.L  StartAddress,D2    Ensure our address is actually at D2
000001F8  7208                     215                  MOVEQ   #8,D1              There are 8 characters in the hex of our address
000001FA  4284                     216                  CLR.L   D4                 Ensure our counter (D4) is 0
000001FC  43F9 00000100            217                  LEA     IOStringLoc,A1     Load our IO String location, to store our output at  
00000202                           218  
00000202                           219          
00000202  5244                     220  IOHEXtoASCII    ADDQ    #1,D4
00000204  E99A                     221                  ROL.L   #4,D2              Get the left-most nyblle to the front..
00000206  1602                     222                  MOVE.B  D2,D3              .. Put the front-most byte into D3    
00000208  C63C 000F                223                  AND.B   #$0F,D3            Distill D3 down to the original left-most nybble
0000020C  B63C 0009                224                  CMP.B   #9,D3              See if our number is greater than 9..
00000210  6F00 0004                225                  BLE     IODIGIT            If it is 9 or less, it's a digit..
00000214  5E03                     226                  ADD.B   #7,D3              Otherwise it is a digit, and needs an additional 7
00000216  0603 0030                227  IODIGIT         ADD.B   #48,D3             We now how the nybble's ASCII code
0000021A  12C3                     228                  MOVE.B  D3,(A1)+           Move the ASCII code into the output string at A1
0000021C  B204                     229                  CMP.B   D4,D1              See if we've read all the characters
0000021E  66E2                     230                  BNE.S   IOHEXtoASCII       Continue if we haven't
00000220                           231  
00000220  43F9 0000077F            232                  LEA     CONTINUE,A1        ask if the user wnats to exit
00000226  103C 000E                233                  MOVE.B  #14,D0
0000022A  4E4F                     234                  TRAP    #15
0000022C                           235                  
0000022C  123C 0000                236                  MOVE.B  #0,D1              clear D1
00000230  103C 0005                237                  MOVE.B  #5,D0              keybaord echo trap task
00000234  4E4F                     238                  TRAP    #15
00000236                           239                  
00000236  43F9 000007B2            240                  LEA     SPACER,A1          println
0000023C  103C 000E                241                  MOVE.B  #14,D0
00000240  4E4F                     242                  TRAP    #15
00000242                           243                  
00000242  B23C 0071                244                  CMP.B   #$71,D1            compare with lowercase q
00000246  6700 0006                245                  BEQ     IODONE             if equal then go to the end
0000024A                           246  
0000024A  6000 FDDE                247                  BRA     IOLOOP             not equal so go to the beginning
0000024E                           248          
0000024E                           249  *-------Finishes the program--  
0000024E                           250        
0000024E  43F9 0000067B            251  IODONE          LEA     OUTRO,A1           Display the ending message 
00000254  103C 000E                252                  MOVE.B  #14,D0
00000258  4E4F                     253                  TRAP    #15
0000025A  103C 0009                254                  MOVE.B  #9,D0
0000025E  4E4F                     255                  TRAP    #15                Halt Simulator
00000260                           256          
00000260  FFFF FFFF                257                  SIMHALT
00000264                           258          
00000264  =0000000D                259  CR              EQU     $0D         
00000264  =0000000A                260  LF              EQU     $0A 
00000264  =00000100                261  IOStringLoc     EQU     $0100              This is where we will store the string of the user input, and other strings
00000264                           262  
00000264                           263  *-------Various outputs------
00000264                           264  
00000264= 20 20 20 20 20 20 ...    265  IntroMsg        DC.B '                              -----------',CR,LF
0000028F= 20 20 20 20 20 20 ...    266                  DC.B '                            /             \',CR,LF
000002BC= 20 20 20 20 20 20 ...    267                  DC.B '                           /     TEAM      \',CR,LF
000002EA= 20 20 20 20 20 20 ...    268                  DC.B '                          /                 \',CR,LF
00000319= 20 20 20 20 20 20 ...    269                  DC.B '                         |                   |',CR,LF
00000349= 20 20 20 20 20 20 ...    270                  DC.B '                         |      CIRCLES      |',CR,LF
00000379= 20 20 20 20 20 20 ...    271                  DC.B '                         |                   |',CR,LF
000003A9= 20 20 20 20 20 20 ...    272                  DC.B '                          \                 /',CR,LF
000003D8= 20 20 20 20 20 20 ...    273                  DC.B '                           \ DISSASSEMBLER /',CR,LF
00000406= 20 20 20 20 20 20 ...    274                  DC.B '                            \             /',CR,LF
00000433= 20 20 20 20 20 20 ...    275                  DC.B '                              -----------',CR,LF,CR,LF,0
00000461                           276                  
00000461= 54 68 69 73 20 70 ...    277  Intro2          DC.B    'This program will dissassemble machine code into readable code',CR,LF
000004A1= 49 74 20 77 69 6C ...    278                  DC.B    'It will ask for a starting and ending address',CR,LF
000004D0= 50 6C 65 61 73 65 ...    279                  DC.B    'Please type both in hex, with a length of 8 or less',CR,LF
00000505= 41 6E 64 20 6E 6F ...    280                  DC.B    'And not ending in an odd number',CR,LF
00000526= 49 66 20 61 6E 20 ...    281                  DC.B    'If an address is input that does not meet the criteria',CR,LF
0000055E= 54 68 65 20 70 72 ...    282                  DC.B    'The program will start over at the starting address prompt',CR,LF
0000059A= 57 68 65 6E 20 74 ...    283                  DC.B    'When the program has reached the ending address',CR,LF
000005CB= 49 74 20 77 69 6C ...    284                  DC.B    'It will ask if you want to try again with different addresses',CR,LF
0000060A= 57 68 65 6E 20 74 ...    285                  DC.B    'When this happens press "q" to exit.',CR,LF,CR,0
00000632                           286                  
00000632= 0D 0A 45 6E 74 65 ...    287  HexStart        DC.B    CR,LF,'Enter a starting address: ',0 Prompt for the user
0000064F= 0D 0A 45 6E 74 65 ...    288  HexEnd          DC.B    CR,LF,'Enter an ending address: ',0 Prompt for the user
0000066B= 20 20 20 20 20 00        289  SPC             DC.B    '     ',0                                tab
00000671= 3C 45 41 3E 2C 3C ...    290  UnkEA           DC.B    '<EA>,<EA>',0                            Interim message for unkown EAs.
0000067B= 0D 0A 54 68 61 6E ...    291  OUTRO           DC.B    CR,LF,'Thank you for using Team Circles Dissassembler!',0                            Outro message
000006AD= 49 20 61 6D 20 73 ...    292  FAIL_INPUT      DC.B    'I am sorry, but you typed an address that did not meet the criteria',CR,LF,0 
000006F3= 54 68 65 20 73 63 ...    293  ENTERPROMPT     DC.B    'The screen limit has been reached, please press enter to continue',0
00000735= 54 68 65 20 65 6E ...    294  STARTGTEND      DC.B    'The ending address was less than the starting address, please try again',CR,LF,0
0000077F= 0D 0A 50 72 65 73 ...    295  CONTINUE        DC.B    CR,LF,'Press "q" to quit or anything else to continue: ',0 ask to exit
000007B2= 0D 0A 00                 296  SPACER          DC.B    CR,LF,0 put the new line after the keyboard input
000007B5                           297  
000007B5                           298  *-------Variables and constants------
000007B5                           299  
000007B6                           300  StartAddress    DS.L    1
000007BA                           301  EndingAddress   DS.L    1
000007BE                           302  COUNTER         DS.L    1 keep track of the lines on the screen
000007C2                           303  
000007C2                           304  
000007C2                           305  
000007C2                           306  
000007C2                           307  
000007C2                           308  
000007C2                           309  
000007C2                           310  
000007C2                           311  
000007C2                           312  
000007C2                           313  
000007C2                           314  
000007C2                           315  
000007C2                           316  
000007C2                           317  
000007C2                           318  
000007C2                           319  
000007C2                           320  
000007C2                           321  
000007C2                           322  
000007C2                           323  
000007C2                           324  
000007C2                           325  
000007C2                           326  
Line 327 WARNING: END directive missing, starting address not set

3 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BAD_EVEN            DE
BAD_LENGTH          A0
CHECK31             58
CONTINUE            77F
COUNTER             7BE
CR                  D
ENDINGADDRESS       7BA
ENDLOOP             124
ENTERCHECK          64
ENTERPROMPT         6F3
FAIL_INPUT          6AD
HEXEND              64F
HEXSTART            632
INTRO2              461
INTROMSG            264
IOASCIITOHEX        F4
IOASCIITOHEX2       14E
IODIGIT             216
IODONE              24E
IOHEXTOASCII        202
IOINTRO             C
IOLOOP              2A
IOORTAG             106
IOORTAG2            160
IOSTRINGLOC         100
LENGTH_CHECK        88
LF                  A
OUTPUTOPCODE        192
OUTRO               67B
SPACER              7B2
SPC                 66B
STARTADDRESS        7B6
STARTGTEND          735
STARTLESSTHNEND     B2
TEST_ODD            C4
UNKEA               671
