00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/5/2016 3:18:44 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OpCode
00000000                             3  * Written by : Circles
00000000                             4  * Date       : ##/##/16
00000000                             5  * Description: Operation Codes File
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  * Put program code here
00000000                             9  
00000000                            10  ; Here we assume that A2 contains the address pointing to our OpCode, and
00000000                            11  ;  we assume that A1 contains the address pointing to our IOStringLoc
00000000  3A1A                      12  OPGETCODE   MOVE.W  (A2)+,D5    ; Push our OpCode into D5
00000002  2C05                      13              MOVE.L  D5,D6       ; Also store the OpCode in D6
00000004  E09E                      14              ROR.L   #8,D6       ; Rotate our OpCode to right-most nybble
00000006  E89E                      15              ROR.L   #4,D6       ; 
00000008  0206 000F                 16              ANDI.B  #$0F,D6     ; Isolate our opcode nybble
0000000C  BC3C 0000                 17              CMP.B   #$00,D6
00000010  6700 0066                 18              BEQ     ADDI        ; ADDI (Worked on)
00000014  BC3C 0001                 19              CMP.B   #$01,D6     
00000018  6700 00EC                 20              BEQ     MOVEB       ; MOVE.B
0000001C  BC3C 0003                 21              CMP.B   #$03,D6     
00000020  6700 011E                 22              BEQ     MOVEW       ; MOVE.W
00000024  BC3C 0002                 23              CMP.B   #$02,D6
00000028  6700 0150                 24              BEQ     MOVEL       ; MOVE.L
0000002C  BC3C 0004                 25              CMP.B   #$04,D6
00000030  6700 0182                 26              BEQ     CNRJML      ; CLR or NOP or RTS or JSR or MOVEM or LEA (Implement)(Working on NOP,RTS,CLR)
00000034  BC3C 0006                 27              CMP.B   #$06,D6
00000038  6700 01D8                 28              BEQ     Bcc         ; Bcc (BCC, BGT, BLE) (Implement)
0000003C  BC3C 0007                 29              CMP.B   #$07,D6
00000040  6700 01D2                 30              BEQ     MOVEQ       ; MOVEQ (Implement)
00000044  BC3C 0008                 31              CMP.B   #$08,D6
00000048  6700 01CC                 32              BEQ     DIVU        ; DIVU (Implement)
0000004C  BC3C 0009                 33              CMP.B   #$09,D6
00000050  6700 01C6                 34              BEQ     SUB         ; SUB (Implement)
00000054  BC3C 000B                 35              CMP.B   #$0B,D6
00000058  6700 01C0                 36              BEQ     CMP         ; CMP (Implement)
0000005C  BC3C 000C                 37              CMP.B   #$0C,D6
00000060  6700 01BA                 38              BEQ     MULSAND     ; MULS or AND opcodes (Implement AND)
00000064  BC3C 000D                 39              CMP.B   #$0D,D6
00000068  6700 026C                 40              BEQ     ADDADDA     ; ADD or ADDA (Implement)
0000006C  BC3C 000E                 41              CMP.B   #$0E,D6 
00000070  6700 0266                 42              BEQ     ASLSRO      ; ASd (ASR) or LSd (LSL) or ROd (ROL) (Implement)
00000074  6000 0264                 43              BRA     UNKNOWN  
00000078                            44     
00000078                            45  ADDI        
00000078  2C05                      46              MOVE.L  D5,D6              ; Push D5 into D6 (Copy OPcode over isolated nybble)
0000007A  EC8E                      47              LSR.L   #6,D6              ; Shift six bits to the right
0000007C  0286 00000003             48              ANDI.L  #$0003,D6          ; Isolate the size bits
00000082                            49              
00000082  BCBC 00000001             50              CMP.L   #$0001,D6          ; See if the size is '01'..
00000088  6700 0034                 51              BEQ     ADDIW              ; ..If so, it's ANDI.W
0000008C  BCBC 00000002             52              CMP.L   #$0002,D6          ; See if the size is '10'..
00000092  6700 004E                 53              BEQ     ADDIL              ; ..If so, it's ANDI.L
00000096  6000 0002                 54              BRA     ADDIB              ; If it isn't either, then it's ANDI.B
0000009A                            55              
0000009A                            56  ADDIB       
0000009A  22FC 41444449             57              MOVE.L  #'ADDI',(A1)+
000000A0  32FC 2E42                 58              MOVE.W  #'.B',(A1)+
000000A4  5C41                      59              ADDQ    #6,D1              ; We added 6 new characters to our IOStringLoc 
000000A6                            60              
000000A6  22FC 20202020             61              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
000000AC  5841                      62              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces
000000AE                            63              
000000AE  2C05                      64              MOVE.L  D5,D6              ; Push D5 into D6
000000B0  0286 0000003F             65              ANDI.L  #$003F,D6          ; Isolate the Src EA bits 
Line 66 ERROR: Undefined symbol
000000B6  4EB9 004DBB8E             66              JSR EAGETSRCEA             ; Find and print the code stored in D6
000000BC                            67              
000000BC  4E75                      68              RTS
000000BE                            69              
000000BE                            70  ADDIW       
000000BE  22FC 41444449             71              MOVE.L  #'ADDI',(A1)+
000000C4  32FC 2E57                 72              MOVE.W  #'.W',(A1)+
000000C8  5C41                      73              ADDQ    #6,D1              ; We added 6 new characters to our IOStringLoc 
000000CA                            74              
000000CA  22FC 20202020             75              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
000000D0  5841                      76              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces
000000D2                            77              
000000D2  2C05                      78              MOVE.L  D5,D6              ; Push D5 into D6
000000D4  0286 0000003F             79              ANDI.L  #$003F,D6          ; Isolate the Src EA bits 
Line 80 ERROR: Undefined symbol
000000DA  4EB9 004DBB8E             80              JSR EAGETSRCEA             ; Find and print the code stored in D6
000000E0  4E75                      81              RTS
000000E2                            82              
000000E2                            83  ADDIL      
000000E2  22FC 41444449             84              MOVE.L  #'ADDI',(A1)+
000000E8  32FC 2E4C                 85              MOVE.W  #'.L',(A1)+
000000EC  5C41                      86              ADDQ    #6,D1              ; We added 6 new characters to our IOStringLoc 
000000EE                            87              
000000EE  22FC 20202020             88              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
000000F4  5841                      89              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces
000000F6                            90              
000000F6  2C05                      91              MOVE.L  D5,D6              ; Push D5 into D6
000000F8  0286 0000003F             92              ANDI.L  #$003F,D6          ; Isolate the Src EA bits 
Line 93 ERROR: Undefined symbol
000000FE  4EB9 004DBB8E             93              JSR EAGETSRCEA             ; Find and print the code stored in D6
00000104                            94                  
00000104  4E75                      95              RTS               
00000106                            96  MOVEB
00000106  22FC 4D4F5645             97              MOVE.L  #'MOVE',(A1)+
0000010C  32FC 2E42                 98              MOVE.W  #'.B',(A1)+
00000110  5C41                      99              ADDQ    #6,D1              ; We added 6 new characters to our IOStringLoc 
00000112                           100              
00000112  22FC 20202020            101              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
00000118  5841                     102              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces
0000011A                           103              
0000011A  2C05                     104              MOVE.L  D5,D6              ; Push D5 into D6
0000011C  0286 0000003F            105              ANDI.L  #$003F,D6          ; Isolate the Src EA bits 
Line 106 ERROR: Undefined symbol
00000122  4EB9 004DBB8E            106              JSR EAGETSRCEA             ; Find and print the code stored in D6
00000128                           107              
00000128  12FC 002C                108              MOVE.B  #',',(A1)+
0000012C  5241                     109              ADDQ    #1,D1
0000012E                           110              
0000012E  2C05                     111              MOVE.L  D5,D6              ; Push D5 into D6
00000130  EC8E                     112              LSR.L   #6,D6              ; Shift six bits to the right
00000132  0286 0000003F            113              ANDI.L  #$003F,D6          ; Isolate the Dst EA bits
Line 114 ERROR: Undefined symbol
00000138  4EB9 004DBB8E            114              JSR EAGETDSTEA
0000013E                           115              
0000013E  4E75                     116              RTS
00000140                           117  MOVEW
00000140  22FC 4D4F5645            118              MOVE.L  #'MOVE',(A1)+
00000146  32FC 2E57                119              MOVE.W  #'.W',(A1)+
0000014A  5C41                     120              ADDQ    #6,D1               ; We added 6 new characters to our IOStringLoc 
0000014C                           121              
0000014C  22FC 20202020            122              MOVE.L  #'    ',(A1)+       ; Add a spacer into our IOStringLoc
00000152  5841                     123              ADDQ    #4,D1               ; We added 4 bytes, aka 4 spaces
00000154                           124              
00000154  2C05                     125              MOVE.L  D5,D6               ; Push D5 into D6
00000156  0286 0000003F            126              ANDI.L  #$003F,D6           ; Isolate the Src EA bits 
Line 127 ERROR: Undefined symbol
0000015C  4EB9 004DBB8E            127              JSR EAGETSRCEA              ; Find and print the code stored in D6
00000162                           128              
00000162  12FC 002C                129              MOVE.B  #',',(A1)+
00000166  5241                     130              ADDQ    #1,D1
00000168                           131              
00000168  2C05                     132              MOVE.L  D5,D6               ; Push D5 into D6
0000016A  EC8E                     133              LSR.L   #6,D6               ; Shift six bits to the right
0000016C  0286 0000003F            134              ANDI.L  #$003F,D6           ; Isolate the Dst EA bits
Line 135 ERROR: Undefined symbol
00000172  4EB9 004DBB8E            135              JSR EAGETDSTEA
00000178                           136              
00000178  4E75                     137              RTS
0000017A                           138  MOVEL
0000017A  22FC 4D4F5645            139              MOVE.L  #'MOVE',(A1)+
00000180  32FC 2E4C                140              MOVE.W  #'.L',(A1)+
00000184  5C41                     141              ADDQ    #6,D1               ; We added 6 new characters to our IOStringLoc 
00000186                           142              
00000186  22FC 20202020            143              MOVE.L  #'    ',(A1)+       ; Add a spacer into our IOStringLoc
0000018C  5841                     144              ADDQ    #4,D1               ; We added 4 bytes, aka 4 spaces
0000018E                           145              
0000018E  2C05                     146              MOVE.L  D5,D6               ; Push D5 into D6
00000190  0286 0000003F            147              ANDI.L  #$003F,D6           ; Isolate the Src EA bits 
Line 148 ERROR: Undefined symbol
00000196  4EB9 004DBB8E            148              JSR EAGETSRCEA              ; Find and print the code stored in D6
0000019C                           149              
0000019C  12FC 002C                150              MOVE.B  #',',(A1)+
000001A0  5241                     151              ADDQ    #1,D1
000001A2                           152              
000001A2  2C05                     153              MOVE.L  D5,D6               ; Push D5 into D6
000001A4  EC8E                     154              LSR.L   #6,D6               ; Shift six bits to the right
000001A6  0286 0000003F            155              ANDI.L  #$003F,D6           ; Isolate the Dst EA bits
Line 156 ERROR: Undefined symbol
000001AC  4EB9 004DBB8E            156              JSR EAGETDSTEA
000001B2                           157              
000001B2  4E75                     158              RTS
000001B4                           159              
000001B4                           160  ; This label determines if the code is either CLR or NOP or RTS or JSR or MOVEM or LEA            
000001B4                           161  CNRJML      
000001B4  2C05                     162              MOVE.L  D5,D6              ; Push D5 into D6 (Copy OPcode over isolated nybble)
000001B6                           163              
000001B6                           164              *NOP & RTS's machine code is hardcoded, check first
000001B6  BCBC 00004E71            165              CMP.L   #$4E71,D6          ; See if the OPcode matches NOP's hardcode
000001BC  6700 002A                166              BEQ     NOP
000001C0  BCBC 00004E75            167              CMP.L   #$4E75,D6          ; See if the OPcode matches RTS's hardcode
000001C6  6700 0032                168              BEQ     RTS
000001CA                           169              
000001CA                           170                                         ; CLR's middle most left nybble is unique (0010)
000001CA  E09E                     171              ROR.L   #8,D6              ; Rotate our OpCode to right-most nybble
000001CC  0206 000F                172              ANDI.B  #$0F,D6            ; Isolate our opcode nybble
000001D0  BC3C 0002                173              CMP.B   #$02,D6            
000001D4  6700 0010                174              BEQ     CLR               
000001D8                           175              
000001D8  2C05                     176              MOVE.L  D5,D6              ; Push D5 into D6
000001DA                           177              
000001DA  6000 0030                178              BRA     JSR
000001DE  6000 002E                179              BRA     MOVEM
000001E2  6000 002C                180              BRA     LEA
000001E6                           181  
000001E6                           182  CLR         *(Implement)
000001E6  4E75                     183              RTS 
000001E8                           184  NOP
000001E8  22FC 4E4F5000            185              MOVE.L  #'NOP',(A1)+
000001EE  5641                     186              ADDQ    #3,D1              ; We added 3 new characters to our IOStringLoc 
000001F0                           187              
000001F0  22FC 20202020            188              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
000001F6  5841                     189              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces        
000001F8  4E75                     190              RTS
000001FA                           191              
000001FA                           192  RTS         
000001FA  22FC 52545300            193              MOVE.L  #'RTS',(A1)+
00000200  5641                     194              ADDQ    #3,D1              ; We added 3 new characters to our IOStringLoc 
00000202                           195              
00000202  22FC 20202020            196              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
00000208  5841                     197              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces        
0000020A  4E75                     198              RTS
0000020C                           199  JSR         *(Implement)
0000020C  4E75                     200              RTS
0000020E                           201  MOVEM       *(Implement)
0000020E  4E75                     202              RTS
00000210                           203  LEA         *(Implement)
00000210  4E75                     204              RTS      
00000212                           205              
00000212                           206  Bcc         *(Implement)
00000212                           207                   
00000212  4E75                     208              RTS
00000214                           209              
00000214                           210  MOVEQ       *(Implement)
00000214                           211                   
00000214  4E75                     212              RTS 
00000216                           213              
00000216                           214  DIVU        *(Implement)
00000216                           215                   
00000216  4E75                     216              RTS
00000218                           217              
00000218                           218  SUB         *(Implement)
00000218                           219                   
00000218  4E75                     220              RTS
0000021A                           221    
0000021A                           222  CMP         *(Implement)
0000021A                           223                   
0000021A  4E75                     224              RTS         
0000021C                           225         
0000021C                           226  ; This label determines if the code is either MULS or AND, by looking at it's size bits     
0000021C  2C05                     227  MULSAND     MOVE.L  D5,D6               ; Copy D5 into D6
0000021E  EC8E                     228              LSR.L   #6,D6               ; Shift the size bits to the far right
00000220  0206 0003                229              ANDI.B  #$3,D6              ; Isolate the size bits
00000224  BC3C 0003                230              CMP.B   #3,D6               ; See if the size is '11'..
00000228  6704                     231              BEQ.S   MULS                ; ..If so, it's a MULS opcode
0000022A  6000 003A                232              BRA     AND                 ; Otherwise, it's an AND code
0000022E                           233          
0000022E  22FC 4D554C53            234  MULS        MOVE.L  #'MULS',(A1)+
00000234  5841                     235              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
00000236                           236              
00000236  22FC 20202020            237              MOVE.L  #'    ',(A1)+       ; Add a spacer into our IOStringLoc
0000023C  5841                     238              ADDQ    #4,D1               ; We added 4 bytes, aka 4 spaces
0000023E                           239              
0000023E  2C05                     240              MOVE.L  D5,D6               ; Copy D5 into D6
00000240  0286 0000003F            241              ANDI.L  #$003F,D6           ; Isolate the Src EA bits
Line 242 ERROR: Undefined symbol
00000246  4EB9 004DBB8E            242              JSR EAGETSRCEA
0000024C                           243              
0000024C  12FC 002C                244              MOVE.B  #',',(A1)+
00000250  5241                     245              ADDQ    #1,D1
00000252                           246              
00000252  2C05                     247              MOVE.L  D5,D6               ; Copy D5 into D6
00000254  E09E                     248              ROR.L   #8,D6               ; Rotate 9 bits to the right (Dn Dst bits)
00000256  E29E                     249              ROR.L   #1,D6               ; Rotate 9 bits to the right (Dn Dst bits)
00000258  0286 00000003            250              ANDI.L  #$0003,D6           ; Isolate the Dn Destination bits
Line 251 ERROR: Undefined symbol
0000025E  4EF9 004DBB8E            251              JMP EADN
00000264                           252              
00000264  4E75                     253              RTS
00000266                           254              
00000266                           255  ; At this point, we know D6 is the size of our opcode
00000266  22FC 414E442E            256  AND         MOVE.L  #'AND.',(A1)+
0000026C  5841                     257              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
0000026E                           258              
0000026E  BC3C 0006                259              CMP.B   #%0110,D6            ; See if D6 is size "%100" through "%110"..
00000272  6700 002A                260              BEQ     ANDLEA              ; If it is, our OpCode is in the format of..
00000276  BC3C 0005                261              CMP.B   #%101,D6            ; .. Dn ~ <EA> --> <EA>
0000027A  6700 0036                262              BEQ     ANDWEA
0000027E  BC3C 0004                263              CMP.B   #%100,D6
00000282  6700 002E                264              BEQ     ANDBEA
00000286                           265              
00000286  BC3C 0002                266              CMP.B   #%10,D6             ; See if D6 is size "%000" through "%010"..
0000028A  6700 0026                267              BEQ     ANDLDN              ; If it is, our OpCode is in the format of..
0000028E  BC3C 0001                268              CMP.B   #%01,D6             ; .. <EA> ~ Dn --> Dn
00000292  6700 0040                269              BEQ     ANDWDN
00000296  BC3C 0000                270              CMP.B   #0,D6
0000029A  6700 0038                271              BEQ     ANDBDN
0000029E                           272              
0000029E  12FC 004C                273  ANDLEA      MOVE.B  #'L',(A1)+
000002A2  5241                     274              ADDQ    #1,D1               ; We added 1 byte into D1
000002A4                           275  
000002A4  12FC 0011                276              MOVE.B  #$11,(A1)+          ; Add a spacer into our IOStringLoc
000002A8  5241                     277              ADDQ    #1,D1               ; We added 4 bytes, aka 4 spaces
000002AA                           278              
000002AA  12FC 0044                279              MOVE.B  #'D',(A1)+          ; Add a spacer into our IOStringLoc
000002AE  5241                     280              ADDQ    #1,D1               ; We added 4 bytes, aka 4 spaces
000002B0                           281              
000002B0  4E75                     282              RTS
000002B2                           283  ANDWEA
000002B2                           284  ANDBEA
000002B2  12FC 004C                285  ANDLDN      MOVE.B  #'L',(A1)+
000002B6  5241                     286              ADDQ    #1,D1               ; We added 1 byte into D1
000002B8                           287  
000002B8  12FC 0009                288              MOVE.B  #$09,(A1)+          ; Add a spacer into our IOStringLoc
000002BC  5241                     289              ADDQ    #1,D1               ; We added 4 bytes, aka 4 spaces
000002BE                           290              
000002BE  2C05                     291              MOVE.L  D5,D6               ; Copy our OpCode again
Line 292 ERROR: Invalid addressing mode
000002C0                           292              ANDI.L  $3F,D6              ; Isolate our EA bits
000002C0                           293              
Line 294 ERROR: Undefined symbol
000002C0  4EB9 004DBB8E            294              JSR EAGETSRCEA              
000002C6                           295              
000002C6  2C05                     296              MOVE.L  D5,D6
000002C8  E08E                     297              LSR.L   #8,D6               ; Shift our OpCode a total of 9 bits to the right
000002CA  E28E                     298              LSR.L   #1,D6               ; 
Line 299 ERROR: Invalid addressing mode
000002CC                           299              ANDI.L  $07,D6              ; Isolate our data register
000002CC                           300              
Line 301 ERROR: Undefined symbol
000002CC  4EB9 004DBB8E            301              JSR EADN
000002D2                           302              
000002D2  4E75                     303              RTS
000002D4                           304  ANDWDN
000002D4                           305  ANDBDN
000002D4  4E75                     306              RTS
000002D6                           307  ; This label determines if the code is either ADD or ADDA           
000002D6                           308  ADDADDA     *(Implement)
000002D6                           309                   
000002D6  4E75                     310              RTS
000002D8                           311  
000002D8                           312  ; This label determines if the code is either ASd (ASR) or LSd (LSL) or ROd (ROL) 
000002D8                           313  ASLSRO      *(Implement)
000002D8                           314                   
000002D8  4E75                     315              RTS
000002DA                           316  UNKNOWN
000002DA  22FC 3F3F3F3F            317              MOVE.L  #'????',(A1)+
000002E0  5841                     318              ADDQ    #4,D1           ; We added 4 new characters to our IOStringLoc 
000002E2                           319              
000002E2  22FC 20202020            320              MOVE.L  #'    ',(A1)+       ; Add a spacer into our IOStringLoc
000002E8  5841                     321              ADDQ    #4,D1               ; We added 4 bytes, aka 4 spaces
000002EA  32FC 2020                322              MOVE.W  #'  ',(A1)+         ; Add a spacer into our IOStringLoc
000002EE  5441                     323              ADDQ    #2,D1               ; We added 2 bytes, aka 2 spaces
000002F0                           324          
000002F0  4E75                     325              RTS
000002F2                           326  * Put variables and constants here
000002F2                           327  
000002F2                           328  
000002F2                           329  
000002F2                           330  
000002F2                           331  
000002F2                           332  
000002F2                           333  
000002F2                           334  
000002F2                           335  
Line 336 WARNING: END directive missing, starting address not set

15 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDADDA             2D6
ADDI                78
ADDIB               9A
ADDIL               E2
ADDIW               BE
AND                 266
ANDBDN              2D4
ANDBEA              2B2
ANDLDN              2B2
ANDLEA              29E
ANDWDN              2D4
ANDWEA              2B2
ASLSRO              2D8
BCC                 212
CLR                 1E6
CMP                 21A
CNRJML              1B4
DIVU                216
JSR                 20C
LEA                 210
MOVEB               106
MOVEL               17A
MOVEM               20E
MOVEQ               214
MOVEW               140
MULS                22E
MULSAND             21C
NOP                 1E8
OPGETCODE           0
RTS                 1FA
SUB                 218
UNKNOWN             2DA
