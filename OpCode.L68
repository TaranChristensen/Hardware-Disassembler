00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/5/2016 4:02:12 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OpCode
00000000                             3  * Written by : Circles
00000000                             4  * Date       : ##/##/16
00000000                             5  * Description: Operation Codes File
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  * Put program code here
00000000                             9  
00000000                            10  ; Here we assume that A2 contains the address pointing to our OpCode, and
00000000                            11  ;  we assume that A1 contains the address pointing to our IOStringLoc
00000000  3A1A                      12  OPGETCODE   MOVE.W  (A2)+,D5    ; Push our OpCode into D5
00000002  2C05                      13              MOVE.L  D5,D6       ; Also store the OpCode in D6
00000004  E09E                      14              ROR.L   #8,D6       ; Rotate our OpCode to right-most nybble
00000006  E89E                      15              ROR.L   #4,D6       ; 
00000008  0206 000F                 16              ANDI.B  #$0F,D6     ; Isolate our opcode nybble
0000000C  BC3C 0000                 17              CMP.B   #$00,D6
00000010  6700 0066                 18              BEQ     ADDI        ; ADDI (Worked on)
00000014  BC3C 0001                 19              CMP.B   #$01,D6     
00000018  6700 00EC                 20              BEQ     MOVEB       ; MOVE.B
0000001C  BC3C 0003                 21              CMP.B   #$03,D6     
00000020  6700 00F4                 22              BEQ     MOVEW       ; MOVE.W
00000024  BC3C 0002                 23              CMP.B   #$02,D6
00000028  6700 00FC                 24              BEQ     MOVEL       ; MOVE.L
0000002C  BC3C 0004                 25              CMP.B   #$04,D6
00000030  6700 0132                 26              BEQ     CNRJML      ; CLR or NOP or RTS or JSR or MOVEM or LEA (Implement)(Working on NOP,RTS,CLR)
00000034  BC3C 0006                 27              CMP.B   #$06,D6
00000038  6700 0188                 28              BEQ     Bcc         ; Bcc (BCC, BGT, BLE) (Implement)
0000003C  BC3C 0007                 29              CMP.B   #$07,D6
00000040  6700 0182                 30              BEQ     MOVEQ       ; MOVEQ (Implement)
00000044  BC3C 0008                 31              CMP.B   #$08,D6
00000048  6700 017C                 32              BEQ     DIVU        ; DIVU (Implement)
0000004C  BC3C 0009                 33              CMP.B   #$09,D6
00000050  6700 0176                 34              BEQ     SUB         ; SUB (Implement)
00000054  BC3C 000B                 35              CMP.B   #$0B,D6
00000058  6700 0170                 36              BEQ     CMP         ; CMP (Implement)
0000005C  BC3C 000C                 37              CMP.B   #$0C,D6
00000060  6700 016A                 38              BEQ     MULSAND     ; MULS or AND opcodes (Implement AND)
00000064  BC3C 000D                 39              CMP.B   #$0D,D6
00000068  6700 0278                 40              BEQ     ADDADDA     ; ADD or ADDA (Implement)
0000006C  BC3C 000E                 41              CMP.B   #$0E,D6 
00000070  6700 0272                 42              BEQ     ASLSRO      ; ASd (ASR) or LSd (LSL) or ROd (ROL) (Implement)
00000074  6000 0270                 43              BRA     UNKNOWN  
00000078                            44     
00000078                            45  ADDI        
00000078  2C05                      46              MOVE.L  D5,D6              ; Push D5 into D6 (Copy OPcode over isolated nybble)
0000007A  EC8E                      47              LSR.L   #6,D6              ; Shift six bits to the right
0000007C  0286 00000003             48              ANDI.L  #$0003,D6          ; Isolate the size bits
00000082                            49              
00000082  BCBC 00000001             50              CMP.L   #$0001,D6          ; See if the size is '01'..
00000088  6700 0034                 51              BEQ     ADDIW              ; ..If so, it's ANDI.W
0000008C  BCBC 00000002             52              CMP.L   #$0002,D6          ; See if the size is '10'..
00000092  6700 004E                 53              BEQ     ADDIL              ; ..If so, it's ANDI.L
00000096  6000 0002                 54              BRA     ADDIB              ; If it isn't either, then it's ANDI.B
0000009A                            55              
0000009A                            56  ADDIB       
0000009A  22FC 41444449             57              MOVE.L  #'ADDI',(A1)+
000000A0  32FC 2E42                 58              MOVE.W  #'.B',(A1)+
000000A4  5C41                      59              ADDQ    #6,D1              ; We added 6 new characters to our IOStringLoc 
000000A6                            60              
000000A6  22FC 20202020             61              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
000000AC  5841                      62              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces
000000AE                            63              
000000AE  2C05                      64              MOVE.L  D5,D6              ; Push D5 into D6
000000B0  0286 0000003F             65              ANDI.L  #$003F,D6          ; Isolate the Src EA bits 
Line 66 ERROR: Undefined symbol
000000B6  4EB9 004DBB8E             66              JSR EAGETSRCEA             ; Find and print the code stored in D6
000000BC                            67              
000000BC  4E75                      68              RTS
000000BE                            69              
000000BE                            70  ADDIW       
000000BE  22FC 41444449             71              MOVE.L  #'ADDI',(A1)+
000000C4  32FC 2E57                 72              MOVE.W  #'.W',(A1)+
000000C8  5C41                      73              ADDQ    #6,D1              ; We added 6 new characters to our IOStringLoc 
000000CA                            74              
000000CA  22FC 20202020             75              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
000000D0  5841                      76              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces
000000D2                            77              
000000D2  2C05                      78              MOVE.L  D5,D6              ; Push D5 into D6
000000D4  0286 0000003F             79              ANDI.L  #$003F,D6          ; Isolate the Src EA bits 
Line 80 ERROR: Undefined symbol
000000DA  4EB9 004DBB8E             80              JSR EAGETSRCEA             ; Find and print the code stored in D6
000000E0  4E75                      81              RTS
000000E2                            82              
000000E2                            83  ADDIL      
000000E2  22FC 41444449             84              MOVE.L  #'ADDI',(A1)+
000000E8  32FC 2E4C                 85              MOVE.W  #'.L',(A1)+
000000EC  5C41                      86              ADDQ    #6,D1              ; We added 6 new characters to our IOStringLoc 
000000EE                            87              
000000EE  22FC 20202020             88              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
000000F4  5841                      89              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces
000000F6                            90              
000000F6  2C05                      91              MOVE.L  D5,D6              ; Push D5 into D6
000000F8  0286 0000003F             92              ANDI.L  #$003F,D6          ; Isolate the Src EA bits 
Line 93 ERROR: Undefined symbol
000000FE  4EB9 004DBB8E             93              JSR EAGETSRCEA             ; Find and print the code stored in D6
00000104                            94                  
00000104  4E75                      95              RTS 
00000106                            96                
00000106  22FC 4D4F5645             97  MOVEB       MOVE.L  #'MOVE',(A1)+
0000010C  32FC 2E42                 98              MOVE.W  #'.B',(A1)+
00000110  5C41                      99              ADDQ    #6,D1              ; We added 6 new characters to our IOStringLoc 
00000112                           100              
00000112  6000 0022                101              BRA MOVEOP
00000116                           102              
00000116  22FC 4D4F5645            103  MOVEW       MOVE.L  #'MOVE',(A1)+
0000011C  32FC 2E57                104              MOVE.W  #'.W',(A1)+
00000120  5C41                     105              ADDQ    #6,D1               ; We added 6 new characters to our IOStringLoc 
00000122                           106              
00000122  6000 0012                107              BRA MOVEOP
00000126                           108              
00000126  22FC 4D4F5645            109  MOVEL       MOVE.L  #'MOVE',(A1)+
0000012C  32FC 2E4C                110              MOVE.W  #'.L',(A1)+
00000130  5C41                     111              ADDQ    #6,D1               ; We added 6 new characters to our IOStringLoc 
00000132                           112              
00000132  6000 0002                113              BRA MOVEOP
00000136                           114              
00000136  22FC 20202020            115  MOVEOP      MOVE.L  #'    ',(A1)+       ; Add a spacer into our IOStringLoc
0000013C  5841                     116              ADDQ    #4,D1               ; We added 4 bytes, aka 4 spaces
0000013E                           117              
0000013E  2C05                     118              MOVE.L  D5,D6               ; Push D5 into D6
00000140  0286 0000003F            119              ANDI.L  #$003F,D6           ; Isolate the Src EA bits 
Line 120 ERROR: Undefined symbol
00000146  4EB9 004DBB8E            120              JSR EAGETSRCEA              ; Find and print the code stored in D6
0000014C                           121              
0000014C  12FC 002C                122              MOVE.B  #',',(A1)+
00000150  5241                     123              ADDQ    #1,D1
00000152                           124              
00000152  2C05                     125              MOVE.L  D5,D6               ; Push D5 into D6
00000154  EC8E                     126              LSR.L   #6,D6               ; Shift six bits to the right
00000156  0286 0000003F            127              ANDI.L  #$003F,D6           ; Isolate the Dst EA bits
Line 128 ERROR: Undefined symbol
0000015C  4EB9 004DBB8E            128              JSR EAGETDSTEA
00000162  4E75                     129              RTS
00000164                           130              
00000164                           131  ; This label determines if the code is either CLR or NOP or RTS or JSR or MOVEM or LEA            
00000164                           132  CNRJML      
00000164  2C05                     133              MOVE.L  D5,D6              ; Push D5 into D6 (Copy OPcode over isolated nybble)
00000166                           134              
00000166                           135              *NOP & RTS's machine code is hardcoded, check first
00000166  BCBC 00004E71            136              CMP.L   #$4E71,D6          ; See if the OPcode matches NOP's hardcode
0000016C  6700 002A                137              BEQ     NOP
00000170  BCBC 00004E75            138              CMP.L   #$4E75,D6          ; See if the OPcode matches RTS's hardcode
00000176  6700 0032                139              BEQ     RTS
0000017A                           140              
0000017A                           141                                         ; CLR's middle most left nybble is unique (0010)
0000017A  E09E                     142              ROR.L   #8,D6              ; Rotate our OpCode to right-most nybble
0000017C  0206 000F                143              ANDI.B  #$0F,D6            ; Isolate our opcode nybble
00000180  BC3C 0002                144              CMP.B   #$02,D6            
00000184  6700 0010                145              BEQ     CLR               
00000188                           146              
00000188  2C05                     147              MOVE.L  D5,D6              ; Push D5 into D6
0000018A                           148              
0000018A  6000 0030                149              BRA     JSR
0000018E  6000 002E                150              BRA     MOVEM
00000192  6000 002C                151              BRA     LEA
00000196                           152  
00000196                           153  CLR         *(Implement)
00000196  4E75                     154              RTS 
00000198                           155  NOP
00000198  22FC 4E4F5000            156              MOVE.L  #'NOP',(A1)+
0000019E  5641                     157              ADDQ    #3,D1              ; We added 3 new characters to our IOStringLoc 
000001A0                           158              
000001A0  22FC 20202020            159              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
000001A6  5841                     160              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces        
000001A8  4E75                     161              RTS
000001AA                           162              
000001AA                           163  RTS         
000001AA  22FC 52545300            164              MOVE.L  #'RTS',(A1)+
000001B0  5641                     165              ADDQ    #3,D1              ; We added 3 new characters to our IOStringLoc 
000001B2                           166              
000001B2  22FC 20202020            167              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
000001B8  5841                     168              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces        
000001BA  4E75                     169              RTS
000001BC                           170  JSR         *(Implement)
000001BC  4E75                     171              RTS
000001BE                           172  MOVEM       *(Implement)
000001BE  4E75                     173              RTS
000001C0                           174  LEA         *(Implement)
000001C0  4E75                     175              RTS      
000001C2                           176              
000001C2                           177  Bcc         *(Implement)
000001C2                           178                   
000001C2  4E75                     179              RTS
000001C4                           180              
000001C4                           181  MOVEQ       *(Implement)
000001C4                           182                   
000001C4  4E75                     183              RTS 
000001C6                           184              
000001C6                           185  DIVU        *(Implement)
000001C6                           186                   
000001C6  4E75                     187              RTS
000001C8                           188              
000001C8                           189  SUB         *(Implement)
000001C8                           190                   
000001C8  4E75                     191              RTS
000001CA                           192    
000001CA                           193  CMP         *(Implement)
000001CA                           194                   
000001CA  4E75                     195              RTS         
000001CC                           196         
000001CC                           197  ; This label determines if the code is either MULS or AND, by looking at it's size bits     
000001CC  2C05                     198  MULSAND     MOVE.L  D5,D6               ; Copy D5 into D6
000001CE  EC8E                     199              LSR.L   #6,D6               ; Shift the size bits to the far right
000001D0  0206 0007                200              ANDI.B  #$7,D6              ; Isolate the size bits
000001D4  BC3C 0007                201              CMP.B   #7,D6               ; See if the size is '111'..
000001D8  6704                     202              BEQ.S   MULS                ; ..If so, it's a MULS opcode
000001DA  6000 003A                203              BRA     AND                 ; Otherwise, it's an AND code
000001DE                           204          
000001DE  22FC 4D554C53            205  MULS        MOVE.L  #'MULS',(A1)+
000001E4  5841                     206              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
000001E6                           207              
000001E6  22FC 20202020            208              MOVE.L  #'    ',(A1)+       ; Add a spacer into our IOStringLoc
000001EC  5841                     209              ADDQ    #4,D1               ; We added 4 bytes, aka 4 spaces
000001EE                           210              
000001EE  2C05                     211              MOVE.L  D5,D6               ; Copy D5 into D6
000001F0  0286 0000003F            212              ANDI.L  #$003F,D6           ; Isolate the Src EA bits
Line 213 ERROR: Undefined symbol
000001F6  4EB9 004DBB8E            213              JSR EAGETSRCEA
000001FC                           214              
000001FC  12FC 002C                215              MOVE.B  #',',(A1)+
00000200  5241                     216              ADDQ    #1,D1
00000202                           217              
00000202  2C05                     218              MOVE.L  D5,D6               ; Copy D5 into D6
00000204  E09E                     219              ROR.L   #8,D6               ; Rotate 9 bits to the right (Dn Dst bits)
00000206  E29E                     220              ROR.L   #1,D6               ; Rotate 9 bits to the right (Dn Dst bits)
00000208  0286 00000003            221              ANDI.L  #$0003,D6           ; Isolate the Dn Destination bits
Line 222 ERROR: Undefined symbol
0000020E  4EF9 004DBB8E            222              JMP EADN
00000214                           223              
00000214  4E75                     224              RTS
00000216                           225              
00000216                           226  ; At this point, we know D6 is the size of our opcode
00000216  22FC 414E442E            227  AND         MOVE.L  #'AND.',(A1)+
0000021C  5841                     228              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
0000021E                           229              
0000021E  BC3C 0006                230              CMP.B   #%0110,D6            ; See if D6 is size "%100" through "%110"..
00000222  6700 0026                231              BEQ     ANDLEA              ; If it is, our OpCode is in the format of..
00000226  BC3C 0005                232              CMP.B   #%101,D6            ; .. Dn ~ <EA> --> <EA>
0000022A  6700 0028                233              BEQ     ANDWEA
0000022E  BC3C 0004                234              CMP.B   #%100,D6
00000232  6700 002A                235              BEQ     ANDBEA
00000236                           236              
00000236  BC3C 0002                237              CMP.B   #%10,D6             ; See if D6 is size "%000" through "%010"..
0000023A  6700 005A                238              BEQ     ANDLDN              ; If it is, our OpCode is in the format of..
0000023E  BC3C 0001                239              CMP.B   #%01,D6             ; .. <EA> ~ Dn --> Dn
00000242  6700 005C                240              BEQ     ANDWDN
00000246  6000 0062                241              BRA     ANDBDN              ; == 000 at this point
0000024A                           242              
0000024A  12FC 004C                243  ANDLEA      MOVE.B  #'L',(A1)+
0000024E  5241                     244              ADDQ    #1,D1               ; We added 1 byte into D1
00000250  6000 0016                245              BRA     ANDEA
00000254                           246              
00000254  12FC 0057                247  ANDWEA      MOVE.B  #'W',(A1)+
00000258  5241                     248              ADDQ    #1,D1               ; We added 1 byte into D1
0000025A  6000 000C                249              BRA     ANDEA
0000025E                           250  
0000025E  12FC 0042                251  ANDBEA      MOVE.B  #'B',(A1)+
00000262  5241                     252              ADDQ    #1,D1               ; We added 1 byte into D1
00000264  6000 0002                253              BRA     ANDEA
00000268                           254  
00000268  12FC 0009                255  ANDEA       MOVE.B  #$09,(A1)+          ; Add a spacer into our IOStringLoc
0000026C  5241                     256              ADDQ    #1,D1               ; We added 4 bytes, aka 4 spaces
0000026E                           257              
0000026E  2C05                     258              MOVE.L  D5,D6
00000270  E08E                     259              LSR.L   #8,D6               ; Shift our OpCode a total of 9 bits to the right
00000272  E28E                     260              LSR.L   #1,D6               ; 
00000274  0286 00000007            261              ANDI.L  #$07,D6             ; Isolate our data register
0000027A                           262              
Line 263 ERROR: Undefined symbol
0000027A  4EB9 004DBB8E            263              JSR EADN
00000280                           264              
00000280  12FC 002C                265              MOVE.B  #',',(A1)+
00000284  5241                     266              ADDQ    #1,D1
00000286                           267              
00000286  2C05                     268              MOVE.L  D5,D6               ; Copy our OpCode again
00000288  0286 0000003F            269              ANDI.L  #$3F,D6             ; Isolate our EA bits
0000028E                           270              
Line 271 ERROR: Undefined symbol
0000028E  4EB9 004DBB8E            271              JSR EAGETSRCEA  
00000294                           272              
00000294  4E75                     273              RTS
00000296                           274              
00000296  12FC 004C                275  ANDLDN      MOVE.B  #'L',(A1)+
0000029A  5241                     276              ADDQ    #1,D1               ; We added 1 byte into D1
0000029C  6000 0016                277              BRA ANDDN
000002A0                           278              
000002A0  12FC 004C                279  ANDWDN      MOVE.B  #'L',(A1)+
000002A4  5241                     280              ADDQ    #1,D1               ; We added 1 byte into D1
000002A6  6000 000C                281              BRA ANDDN
000002AA                           282  
000002AA  12FC 004C                283  ANDBDN      MOVE.B  #'L',(A1)+
000002AE  5241                     284              ADDQ    #1,D1               ; We added 1 byte into D1
000002B0  6000 0002                285              BRA ANDDN  
000002B4                           286  
000002B4                           287  ANDDN
000002B4  12FC 0009                288              MOVE.B  #$09,(A1)+          ; Add a spacer into our IOStringLoc
000002B8  5241                     289              ADDQ    #1,D1               ; We added 4 bytes, aka 4 spaces
000002BA                           290              
000002BA  2C05                     291              MOVE.L  D5,D6               ; Copy our OpCode again
000002BC  0286 0000003F            292              ANDI.L  #$3F,D6             ; Isolate our EA bits
000002C2                           293              
Line 294 ERROR: Undefined symbol
000002C2  4EB9 004DBB8E            294              JSR EAGETSRCEA              
000002C8                           295              
000002C8  12FC 002C                296              MOVE.B  #',',(A1)+
000002CC  5241                     297              ADDQ    #1,D1
000002CE                           298              
000002CE  2C05                     299              MOVE.L  D5,D6
000002D0  E08E                     300              LSR.L   #8,D6               ; Shift our OpCode a total of 9 bits to the right
000002D2  E28E                     301              LSR.L   #1,D6               ; 
000002D4  0286 00000007            302              ANDI.L  #$07,D6             ; Isolate our data register
000002DA                           303              
Line 304 ERROR: Undefined symbol
000002DA  4EB9 004DBB8E            304              JSR EADN
000002E0                           305              
000002E0  4E75                     306              RTS
000002E2                           307  
000002E2                           308  ; This label determines if the code is either ADD or ADDA           
000002E2                           309  ADDADDA     *(Implement)
000002E2                           310                   
000002E2  4E75                     311              RTS
000002E4                           312  
000002E4                           313  ; This label determines if the code is either ASd (ASR) or LSd (LSL) or ROd (ROL) 
000002E4                           314  ASLSRO      *(Implement)
000002E4                           315                   
000002E4  4E75                     316              RTS
000002E6                           317  UNKNOWN
000002E6  22FC 3F3F3F3F            318              MOVE.L  #'????',(A1)+
000002EC  5841                     319              ADDQ    #4,D1           ; We added 4 new characters to our IOStringLoc 
000002EE                           320              
000002EE  22FC 20202020            321              MOVE.L  #'    ',(A1)+       ; Add a spacer into our IOStringLoc
000002F4  5841                     322              ADDQ    #4,D1               ; We added 4 bytes, aka 4 spaces
000002F6  32FC 2020                323              MOVE.W  #'  ',(A1)+         ; Add a spacer into our IOStringLoc
000002FA  5441                     324              ADDQ    #2,D1               ; We added 2 bytes, aka 2 spaces
000002FC                           325          
000002FC  4E75                     326              RTS
000002FE                           327  * Put variables and constants here
000002FE                           328  
000002FE                           329  
000002FE                           330  
000002FE                           331  
000002FE                           332  
000002FE                           333  
000002FE                           334  
000002FE                           335  
000002FE                           336  
Line 337 WARNING: END directive missing, starting address not set

11 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDADDA             2E2
ADDI                78
ADDIB               9A
ADDIL               E2
ADDIW               BE
AND                 216
ANDBDN              2AA
ANDBEA              25E
ANDDN               2B4
ANDEA               268
ANDLDN              296
ANDLEA              24A
ANDWDN              2A0
ANDWEA              254
ASLSRO              2E4
BCC                 1C2
CLR                 196
CMP                 1CA
CNRJML              164
DIVU                1C6
JSR                 1BC
LEA                 1C0
MOVEB               106
MOVEL               126
MOVEM               1BE
MOVEOP              136
MOVEQ               1C4
MOVEW               116
MULS                1DE
MULSAND             1CC
NOP                 198
OPGETCODE           0
RTS                 1AA
SUB                 1C8
UNKNOWN             2E6
