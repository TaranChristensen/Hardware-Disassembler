00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/7/2016 4:05:00 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : OpCode
00000000                             3  * Written by : Circles
00000000                             4  * Date       : ##/##/16
00000000                             5  * Description: Operation Codes File
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  * Put program code here
00000000                             9  
00000000                            10  ; Here we assume that A2 contains the address pointing to our OpCode, and
00000000                            11  ;  we assume that A1 contains the address pointing to our IOStringLoc
00000000  3A1A                      12  OPGETCODE   MOVE.W  (A2)+,D5    ; Push our OpCode into D5
00000002  2C05                      13              MOVE.L  D5,D6       ; Also store the OpCode in D6
00000004  E09E                      14              ROR.L   #8,D6       ; Rotate our OpCode to right-most nybble
00000006  E89E                      15              ROR.L   #4,D6       ; 
00000008  0206 000F                 16              ANDI.B  #$0F,D6     ; Isolate our opcode nybble
0000000C  BC3C 0000                 17              CMP.B   #$00,D6
00000010  6700 0066                 18              BEQ     ADDI        ; ADDI (Worked on)
00000014  BC3C 0001                 19              CMP.B   #$01,D6     
00000018  6700 010A                 20              BEQ     MOVEB       ; MOVE.B
0000001C  BC3C 0003                 21              CMP.B   #$03,D6     
00000020  6700 0112                 22              BEQ     MOVEW       ; MOVE.W
00000024  BC3C 0002                 23              CMP.B   #$02,D6
00000028  6700 011A                 24              BEQ     MOVEL       ; MOVE.L
0000002C  BC3C 0004                 25              CMP.B   #$04,D6
00000030  6700 0150                 26              BEQ     CNRJML      ; CLR or NOP or RTS or JSR or MOVEM or LEA (Implement)(Working on NOP,RTS,CLR)
00000034  BC3C 0006                 27              CMP.B   #$06,D6
00000038  6700 0272                 28              BEQ     Bcc         ; Bcc (BCC, BGT, BLE) (Implement)
0000003C  BC3C 0007                 29              CMP.B   #$07,D6
00000040  6700 026C                 30              BEQ     MOVEQ       ; MOVEQ (Implement)
00000044  BC3C 0008                 31              CMP.B   #$08,D6
00000048  6700 0266                 32              BEQ     DIVU        ; DIVU (Implement)
0000004C  BC3C 0009                 33              CMP.B   #$09,D6
00000050  6700 0260                 34              BEQ     SUB         ; SUB (Implement)
00000054  BC3C 000B                 35              CMP.B   #$0B,D6
00000058  6700 0300                 36              BEQ     CMP         ; CMP (Implement)
0000005C  BC3C 000C                 37              CMP.B   #$0C,D6
00000060  6700 02FA                 38              BEQ     MULSAND     ; MULS or AND opcodes
00000064  BC3C 000D                 39              CMP.B   #$0D,D6
00000068  6700 0438                 40              BEQ     ADDADDA     ; ADD or ADDA
0000006C  BC3C 000E                 41              CMP.B   #$0E,D6 
00000070  6700 0538                 42              BEQ     ASLSRO      ; ASd (ASR) or LSd (LSL) or ROd (ROL) (Implement)
00000074  6000 0536                 43              BRA     UNKNOWN  
00000078                            44     
00000078                            45  ADDI                                    ; Confirmed first left-most 4 bits of ADDI
00000078  2C05                      46              MOVE.L  D5,D6               ; Push D5 into D6
0000007A  E09E                      47              ROR.L   #8,D6               ; Rotate left-most middle nybble to the right-most nybble
0000007C  0206 000F                 48              ANDI.B  #$0F,D6             ; Isolate opcode nybble
00000080  BC3C 0006                 49              CMP.B   #$06,D6             ; If it matches ADDI's left-most middle nybble, branch
00000084  6700 0006                 50              BEQ     ADDI8               ; First 8 left-most bits of ADDI confirmed 
00000088  6000 0522                 51              BRA     UNKNOWN             ; else unknown                       
0000008C                            52              
0000008C                            53  ADDI8                                   ; Confirmed first left-most 8 bits of ADDI
0000008C                            54  
0000008C  2C05                      55              MOVE.L  D5,D6              ; Push D5 into D6 (Copy OPcode over isolated nybble)
0000008E  EC8E                      56              LSR.L   #6,D6              ; Shift six bits to the right
00000090  0286 00000003             57              ANDI.L  #$0003,D6          ; Isolate the size bits
00000096                            58                         
00000096  BCBC 00000000             59              CMP.L   #$0000,D6          ; See if the size is '00'..
0000009C  6700 001A                 60              BEQ     ADDIB              ; ..If so, it's ANDI.B
000000A0  BCBC 00000001             61              CMP.L   #$0001,D6          ; See if the size is '01'..
000000A6  6700 0034                 62              BEQ     ADDIW              ; ..If so, it's ANDI.W
000000AA  BCBC 00000002             63              CMP.L   #$0002,D6          ; See if the size is '10'..
000000B0  6700 004E                 64              BEQ     ADDIL              ; ..If so, it's ANDI.L
000000B4                            65              
000000B4  6000 04F6                 66              BRA     UNKNOWN            ; If it isn't any, then it's Unknown
000000B8                            67              
000000B8                            68  ADDIB       
000000B8  22FC 41444449             69              MOVE.L  #'ADDI',(A1)+
000000BE  32FC 2E42                 70              MOVE.W  #'.B',(A1)+
000000C2  5C41                      71              ADDQ    #6,D1              ; We added 6 new characters to our IOStringLoc 
000000C4                            72              
000000C4  22FC 20202020             73              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
000000CA  5841                      74              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces
000000CC                            75              
000000CC  2C05                      76              MOVE.L  D5,D6              ; Push D5 into D6
000000CE  0286 0000003F             77              ANDI.L  #$003F,D6          ; Isolate the Src EA bits 
Line 78 ERROR: Undefined symbol
000000D4  4EB9 004DBB8E             78              JSR EAGETSRCEA             ; Find and print the code stored in D6
000000DA                            79              
000000DA  4E75                      80              RTS
000000DC                            81              
000000DC                            82  ADDIW       
000000DC  22FC 41444449             83              MOVE.L  #'ADDI',(A1)+
000000E2  32FC 2E57                 84              MOVE.W  #'.W',(A1)+
000000E6  5C41                      85              ADDQ    #6,D1              ; We added 6 new characters to our IOStringLoc 
000000E8                            86              
000000E8  22FC 20202020             87              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
000000EE  5841                      88              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces
000000F0                            89              
000000F0  2C05                      90              MOVE.L  D5,D6              ; Push D5 into D6
000000F2  0286 0000003F             91              ANDI.L  #$003F,D6          ; Isolate the Src EA bits 
Line 92 ERROR: Undefined symbol
000000F8  4EB9 004DBB8E             92              JSR EAGETSRCEA             ; Find and print the code stored in D6
000000FE  4E75                      93              RTS
00000100                            94              
00000100                            95  ADDIL      
00000100  22FC 41444449             96              MOVE.L  #'ADDI',(A1)+
00000106  32FC 2E4C                 97              MOVE.W  #'.L',(A1)+
0000010A  5C41                      98              ADDQ    #6,D1              ; We added 6 new characters to our IOStringLoc 
0000010C                            99              
0000010C  22FC 20202020            100              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
00000112  5841                     101              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces
00000114                           102              
00000114  2C05                     103              MOVE.L  D5,D6              ; Push D5 into D6
00000116  0286 0000003F            104              ANDI.L  #$003F,D6          ; Isolate the Src EA bits 
Line 105 ERROR: Undefined symbol
0000011C  4EB9 004DBB8E            105              JSR EAGETSRCEA             ; Find and print the code stored in D6
00000122                           106                  
00000122  4E75                     107              RTS 
00000124                           108                
00000124  22FC 4D4F5645            109  MOVEB       MOVE.L  #'MOVE',(A1)+
0000012A  32FC 2E42                110              MOVE.W  #'.B',(A1)+
0000012E  5C41                     111              ADDQ    #6,D1              ; We added 6 new characters to our IOStringLoc 
00000130                           112              
00000130  6000 0022                113              BRA MOVEOP
00000134                           114              
00000134  22FC 4D4F5645            115  MOVEW       MOVE.L  #'MOVE',(A1)+
0000013A  32FC 2E57                116              MOVE.W  #'.W',(A1)+
0000013E  5C41                     117              ADDQ    #6,D1               ; We added 6 new characters to our IOStringLoc 
00000140                           118              
00000140  6000 0012                119              BRA MOVEOP
00000144                           120              
00000144  22FC 4D4F5645            121  MOVEL       MOVE.L  #'MOVE',(A1)+
0000014A  32FC 2E4C                122              MOVE.W  #'.L',(A1)+
0000014E  5C41                     123              ADDQ    #6,D1               ; We added 6 new characters to our IOStringLoc 
00000150                           124              
00000150  6000 0002                125              BRA MOVEOP
00000154                           126              
00000154  22FC 20202020            127  MOVEOP      MOVE.L  #'    ',(A1)+       ; Add a spacer into our IOStringLoc
0000015A  5841                     128              ADDQ    #4,D1               ; We added 4 bytes, aka 4 spaces
0000015C                           129              
0000015C  2C05                     130              MOVE.L  D5,D6               ; Push D5 into D6
0000015E  0286 0000003F            131              ANDI.L  #$003F,D6           ; Isolate the Src EA bits 
Line 132 ERROR: Undefined symbol
00000164  4EB9 004DBB8E            132              JSR EAGETSRCEA              ; Find and print the code stored in D6
0000016A                           133              
0000016A  12FC 002C                134              MOVE.B  #',',(A1)+
0000016E  5241                     135              ADDQ    #1,D1
00000170                           136              
00000170  2C05                     137              MOVE.L  D5,D6               ; Push D5 into D6
00000172  EC8E                     138              LSR.L   #6,D6               ; Shift six bits to the right
00000174  0286 0000003F            139              ANDI.L  #$003F,D6           ; Isolate the Dst EA bits
Line 140 ERROR: Undefined symbol
0000017A  4EB9 004DBB8E            140              JSR EAGETDSTEA
00000180  4E75                     141              RTS
00000182                           142              
00000182                           143  ; This label determines if the code is either CLR or NOP or RTS or JSR or MOVEM or LEA
00000182                           144  ; Here we assume that the first left-most four bits equal 0100            
00000182                           145  CNRJML      
00000182  2C05                     146              MOVE.L  D5,D6              ; Push D5 into D6 (Copy OPcode over isolated nybble)
00000184                           147              
00000184                           148              *NOP & RTS's machine code is uniquely hardcoded, check first
00000184  BCBC 00004E71            149              CMP.L   #$4E71,D6          ; See if the OPcode matches NOP's hardcode
0000018A  6700 0060                150              BEQ     NOP
0000018E  BCBC 00004E75            151              CMP.L   #$4E75,D6          ; See if the OPcode matches RTS's hardcode
00000194  6700 006A                152              BEQ     RTS
00000198                           153                                         ; CLR's middle most left nybble is unique (0010)
00000198  E09E                     154              ROR.L   #8,D6              ; Rotate our OpCode to right-most nybble
0000019A  0206 000F                155              ANDI.B  #$0F,D6            ; Isolate our opcode nybble
0000019E  BC3C 0002                156              CMP.B   #$02,D6            ; See if matches nybble
000001A2  6700 0046                157              BEQ     CLR               
000001A6                           158              
000001A6  2C05                     159              MOVE.L  D5,D6              ; Push D5 into D6
000001A8  E08E                     160              LSR.L   #8,D6              ; Shift 8 bits to the right
000001AA                           161              
000001AA  0806 0000                162              BTST    #$00,D6            ; See if our right-most bit is set
000001AE  6600 00F0                163              BNE     LEA                ; If our bit is set, branch to LEA     
000001B2                           164              
000001B2  E28E                     165              LSR.L   #1,D6              ; Shift another bit
000001B4  0806 0000                166              BTST    #$00,D6            ; See if our right-most bit is set
000001B8  6600 005A                167              BNE     JSR                ; If this one is set, branch to JSR
000001BC                           168              
000001BC  6000 0062                169              BRA     MOVEM
000001C0                           170                                         ; LEA's middle most left nybble is unique (xxx1)
000001C0  0806 0001                171              BTST    #1,D6              ; Check the right most bit's value
000001C4  6700 00DA                172              BEQ     LEA                ; If equals 1, branch
000001C8                           173                 
000001C8                           174                                         ; MOVEM's middle most left nybble is unique (1x00)
000001C8  E29E                     175              ROR.L   #1,D6              ; first bit must be 0, rotate 1 bit 
000001CA  0806 0000                176              BTST    #0,D6               ; Compare again for 00 match
000001CE  6700 0050                177              BEQ     MOVEM                           
000001D2                           178                                         
000001D2  2C05                     179              MOVE.L  D5,D6              ; Push D5 into D6; JSR's middle nybbles are unique (1110 10xx)
000001D4  EC9E                     180              ROR.L   #6,D6              ; Rotate 6 bits
000001D6  0286 000000FF            181              ANDI.L  #$00FF,D6          ; Isolate the 8 known bits (00 1110 10)
000001DC  BCBC 0000003A            182              CMP.L   #$003A,D6          ; Compare
000001E2  6700 0030                183              BEQ     JSR                ; Branch
000001E6                           184              
000001E6  6000 03C4                185              BRA     UNKNOWN            ; If it doesnt any match, then it's Unknown
000001EA                           186  
000001EA                           187  
000001EA                           188  ;  Here we assume the first left-most 8 bits have been confirmed: 0100 0010
000001EA                           189  CLR         *(Implement)
000001EA                           190  
000001EA  4E75                     191              RTS
000001EC                           192              
000001EC                           193  ;  Here we assume that all 16 bits have been confirmed 
000001EC                           194  NOP
000001EC  32FC 4E4F                195              MOVE.W  #'NO',(A1)+
000001F0  12FC 0050                196              MOVE.B  #'P',(A1)+
000001F4  5641                     197              ADDQ    #3,D1              ; We added 3 new characters to our IOStringLoc 
000001F6                           198              
000001F6  22FC 20202020            199              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
000001FC  5841                     200              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces        
000001FE  4E75                     201              RTS
00000200                           202  
00000200                           203  ;  Here we assume that all 16 bits have been confirmed            
00000200                           204  RTS         
00000200  32FC 5254                205              MOVE.W  #'RT',(A1)+
00000204  12FC 0053                206              MOVE.B  #'S',(A1)+
00000208  5641                     207              ADDQ    #3,D1              ; We added 3 new characters to our IOStringLoc 
0000020A                           208              
0000020A  22FC 20202020            209              MOVE.L  #'    ',(A1)+      ; Add a spacer into our IOStringLoc
00000210  5841                     210              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces        
00000212  4E75                     211              RTS
00000214                           212              
00000214                           213  
00000214                           214  ;  Here we assume the first left-most 10 bits have been confirmed: 0100 1110 10 
00000214                           215  JSR         *(Implement)
00000214  32FC 4A53                216              MOVE.W  #'JS',(A1)+
00000218  12FC 0052                217              MOVE.B  #'R',(A1)+
0000021C  5641                     218              ADDQ    #3,D1              ; We added 3 new characters to our IOStringLoc 
0000021E  4E75                     219              RTS
00000220                           220              
00000220                           221  
00000220                           222  ;  Here we assume that these left-most have been confirmed, where - have not been confirmed: 0100 --00
00000220                           223  MOVEM       *(Implement)
00000220  22FC 4D4F5645            224              MOVE.L  #'MOVE',(A1)+
00000226  32FC 4D2E                225              MOVE.W  #'M.',(A1)+
0000022A  5C41                     226              ADDQ    #6,D1              ; We added 6 new characters to our IOStringLoc 
0000022C                           227              
0000022C  2C05                     228              MOVE.L  D5,D6              ; Copy our OpCode
0000022E  EC8E                     229              LSR.L   #6,D6              ; Shift it 6 bits to the right
00000230  0806 0000                230              BTST    #$00,D6            ; If our size bit is 0..
00000234  6700 0006                231              BEQ     MOVEMW             ; .. Its a MOVEM of size W
00000238  6000 000C                232              BRA     MOVEML             ; .. Otherwise it's of size L
0000023C                           233  
0000023C  12FC 0057                234  MOVEMW      MOVE.B  #'W',(A1)+
00000240  5241                     235              ADDQ    #1,D1              ; We've added another character into IOStringLoc
00000242  6000 0008                236              BRA     MOVEMOP            ; MovemOp label, to skip MovemL label
00000246                           237              
00000246  12FC 004C                238  MOVEML      MOVE.B  #'L',(A1)+
0000024A  5241                     239              ADDQ    #1,D1              ; We've added another character into IOStringLoc
0000024C                           240              
0000024C  12FC 0020                241  MOVEMOP     MOVE.B  #' ',(A1)+         ; Add a spacer into our IOStringLoc
00000250  32FC 2020                242              MOVE.W  #'  ',(A1)+        ;
00000254  12FC 0020                243              MOVE.B  #' ',(A1)+         ;
00000258  5841                     244              ADDQ    #4,D1              ; We added 4 bytes, aka 4 spaces 
0000025A                           245              
0000025A  E88E                     246              LSR.L   #4,D6              ; Shift our OpCode 4 bits to the left of Size (going to the right)
0000025C  0806 0000                247              BTST    #$00,D6            ; Check our Direction bit
00000260  6700 0006                248              BEQ     MOVEMPRED          ; If it's 0, our direction is Pre Decrement (eg. Move TO the stack)
00000264  6000 001E                249              BRA     MOVEMPOSTI         ; Otherwise, it's Post Increment (eg. Move FROM the stack)
00000268                           250              
00000268                           251  MOVEMPRED   ; This part is where we get the gross A0-A6/D0-D7 part
Line 252 ERROR: Undefined symbol
00000268  4EB9 004DBB8E            252              JSR     EAMOVEMPRED  
0000026E                           253              
0000026E  12FC 002C                254              MOVE.B  #',',(A1)+
00000272  5241                     255              ADDQ    #1,D1
00000274                           256              
00000274  2C05                     257              MOVE.L  D5,D6              ; Copy our OpCode to D6
00000276  0286 0000003F            258              ANDI.L  #$3F,D6            ; Isolate our EA src bits
0000027C                           259              
Line 260 ERROR: Undefined symbol
0000027C  4EB9 004DBB8E            260              JSR EAGETSRCEA  
00000282                           261            
00000282  4E75                     262              RTS
00000284                           263  
00000284  2C05                     264  MOVEMPOSTI  MOVE.L  D5,D6              ; Copy our OpCode to D6
00000286  0286 0000003F            265              ANDI.L  #$3F,D6            ; Isolate our EA src bits
0000028C                           266              
Line 267 ERROR: Undefined symbol
0000028C  4EB9 004DBB8E            267              JSR EAGETSRCEA  
00000292                           268              
00000292  12FC 002C                269              MOVE.B  #',',(A1)+
00000296  5241                     270              ADDQ    #1,D1
00000298                           271              
00000298                           272              ; This part is where we get the gross A0-A6/D0-D7 part
Line 273 ERROR: Undefined symbol
00000298  4EB9 004DBB8E            273              JSR     EAMOVEMPOSTI
0000029E                           274              
0000029E  4E75                     275              RTS
000002A0                           276              
000002A0                           277  
000002A0                           278  ;  Here we assume that these left-most have been confirmed, where - have not been confirmed: 0100 ---1            
000002A0                           279  LEA         *(Implement)
000002A0  32FC 4C45                280              MOVE.W  #'LE',(A1)+
000002A4  12FC 0041                281              MOVE.B  #'A',(A1)+
000002A8  5641                     282              ADDQ    #3,D1              ; We added 3 new characters to our IOStringLoc 
000002AA  4E75                     283              RTS      
000002AC                           284              
000002AC                           285  Bcc         *(Implement)
000002AC                           286                   
000002AC  4E75                     287              RTS
000002AE                           288              
000002AE                           289  MOVEQ       *(Implement)
000002AE                           290                   
000002AE  4E75                     291              RTS 
000002B0                           292              
000002B0                           293  DIVU        *(Implement)
000002B0                           294                   
000002B0  4E75                     295              RTS
000002B2                           296              
000002B2                           297  SUB         *(Implement)
000002B2  2C05                     298              MOVE.L  D5,D6               ; Copy D5 into D6
000002B4  EC8E                     299              LSR.L   #6,D6               ; Shift the size bits to the far right
000002B6  0206 0007                300              ANDI.B  #$7,D6              ; Isolate the size bits    
000002BA                           301                   
000002BA  BC3C 0006                302              CMP.B   #%0110,D6            ; See if D6 is size "%100" through "%110"..
000002BE  6700 002E                303              BEQ     SUBLEA              ; If it is, our OpCode is in the format of..
000002C2  BC3C 0005                304              CMP.B   #%101,D6            ; .. Dn ~ <EA> --> <EA>
000002C6  6700 0038                305              BEQ     SUBWEA
000002CA  BC3C 0004                306              CMP.B   #%100,D6
000002CE  6700 0042                307              BEQ     SUBBEA
000002D2                           308              
000002D2  BC3C 0002                309              CMP.B   #%10,D6             ; See if D6 is size "%000" through "%010"..
000002D6  6700 004C                310              BEQ     SUBLDN              ; If it is, our OpCode is in the format of..
000002DA  BC3C 0001                311              CMP.B   #%01,D6             ; .. <EA> ~ Dn --> Dn
000002DE  6700 0056                312              BEQ     SUBWDN
000002E2  BC3C 0000                313              CMP.B   #%00,D6
000002E6  6700 0060                314              BEQ     SUBBDN              ; == 000 at this point
000002EA                           315              
000002EA  6000 02C0                316              BRA     UNKNOWN
000002EE                           317              
000002EE  22FC 5355422E            318  SUBLEA      MOVE.L  #'SUB.',(A1)+
000002F4  5841                     319              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
000002F6  12FC 004C                320              MOVE.B  #'L',(A1)+
000002FA  5241                     321              ADDQ    #1,D1               ; We added 1 byte into D1
000002FC  6000 0112                322              BRA     ANDEA
00000300                           323              
00000300  22FC 5355422E            324  SUBWEA      MOVE.L  #'SUB.',(A1)+
00000306  5841                     325              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
00000308  12FC 0057                326              MOVE.B  #'W',(A1)+
0000030C  5241                     327              ADDQ    #1,D1               ; We added 1 byte into D1
0000030E  6000 0100                328              BRA     ANDEA
00000312                           329  
00000312  22FC 5355422E            330  SUBBEA      MOVE.L  #'SUB.',(A1)+
00000318  5841                     331              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
0000031A  12FC 0042                332              MOVE.B  #'B',(A1)+
0000031E  5241                     333              ADDQ    #1,D1               ; We added 1 byte into D1
00000320  6000 00EE                334              BRA     ANDEA
00000324                           335  
00000324  22FC 5355422E            336  SUBLDN      MOVE.L  #'SUB.',(A1)+
0000032A  5841                     337              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
0000032C  12FC 004C                338              MOVE.B  #'L',(A1)+
00000330  5241                     339              ADDQ    #1,D1               ; We added 1 byte into D1
00000332  6000 0140                340              BRA ANDDN
00000336                           341              
00000336  22FC 5355422E            342  SUBWDN      MOVE.L  #'SUB.',(A1)+
0000033C  5841                     343              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
0000033E  12FC 0057                344              MOVE.B  #'W',(A1)+
00000342  5241                     345              ADDQ    #1,D1               ; We added 1 byte into D1
00000344  6000 012E                346              BRA ANDDN
00000348                           347  
00000348  22FC 5355422E            348  SUBBDN      MOVE.L  #'SUB.',(A1)+
0000034E  5841                     349              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
00000350  12FC 0042                350              MOVE.B  #'B',(A1)+
00000354  5241                     351              ADDQ    #1,D1               ; We added 1 byte into D1
00000356  6000 011C                352              BRA ANDDN  
0000035A                           353  
0000035A                           354  
0000035A                           355  CMP         *(Implement)
0000035A                           356                   
0000035A  4E75                     357              RTS         
0000035C                           358         
0000035C                           359  ; This label determines if the code is either MULS or AND, by looking at it's size bits     
0000035C  2C05                     360  MULSAND     MOVE.L  D5,D6               ; Copy D5 into D6
0000035E  EC8E                     361              LSR.L   #6,D6               ; Shift the size bits to the far right
00000360  0206 0007                362              ANDI.B  #$7,D6              ; Isolate the size bits
00000364  BC3C 0007                363              CMP.B   #7,D6               ; See if the size is '111'..
00000368  6704                     364              BEQ.S   MULS                ; ..If so, it's a MULS opcode
0000036A  6000 003A                365              BRA     AND                 ; Otherwise, it's an AND code
0000036E                           366          
0000036E  22FC 4D554C53            367  MULS        MOVE.L  #'MULS',(A1)+
00000374  5841                     368              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
00000376                           369              
00000376  22FC 20202020            370              MOVE.L  #'    ',(A1)+       ; Add a spacer into our IOStringLoc
0000037C  5841                     371              ADDQ    #4,D1               ; We added 4 bytes, aka 4 spaces
0000037E                           372              
0000037E  2C05                     373              MOVE.L  D5,D6               ; Copy D5 into D6
00000380  0286 0000003F            374              ANDI.L  #$003F,D6           ; Isolate the Src EA bits
Line 375 ERROR: Undefined symbol
00000386  4EB9 004DBB8E            375              JSR EAGETSRCEA
0000038C                           376              
0000038C  12FC 002C                377              MOVE.B  #',',(A1)+
00000390  5241                     378              ADDQ    #1,D1
00000392                           379              
00000392  2C05                     380              MOVE.L  D5,D6               ; Copy D5 into D6
00000394  E09E                     381              ROR.L   #8,D6               ; Rotate 9 bits to the right (Dn Dst bits)
00000396  E29E                     382              ROR.L   #1,D6               ; Rotate 9 bits to the right (Dn Dst bits)
00000398  0286 00000003            383              ANDI.L  #$0003,D6           ; Isolate the Dn Destination bits
Line 384 ERROR: Undefined symbol
0000039E  4EF9 004DBB8E            384              JMP EADN
000003A4                           385              
000003A4  4E75                     386              RTS
000003A6                           387              
000003A6                           388  ; At this point, we know D6 is the size of our opcode
000003A6  BC3C 0006                389  AND         CMP.B   #%0110,D6            ; See if D6 is size "%100" through "%110"..
000003AA  6700 002E                390              BEQ     ANDLEA              ; If it is, our OpCode is in the format of..
000003AE  BC3C 0005                391              CMP.B   #%101,D6            ; .. Dn ~ <EA> --> <EA>
000003B2  6700 0038                392              BEQ     ANDWEA
000003B6  BC3C 0004                393              CMP.B   #%100,D6
000003BA  6700 0042                394              BEQ     ANDBEA
000003BE                           395              
000003BE  BC3C 0002                396              CMP.B   #%10,D6             ; See if D6 is size "%000" through "%010"..
000003C2  6700 007A                397              BEQ     ANDLDN              ; If it is, our OpCode is in the format of..
000003C6  BC3C 0001                398              CMP.B   #%01,D6             ; .. <EA> ~ Dn --> Dn
000003CA  6700 0084                399              BEQ     ANDWDN
000003CE  BC3C 0000                400              CMP.B   #%00,D6
000003D2  6700 008E                401              BEQ     ANDBDN              ; == 000 at this point
000003D6                           402              
000003D6  6000 01D4                403              BRA     UNKNOWN
000003DA                           404              
000003DA  22FC 414E442E            405  ANDLEA      MOVE.L  #'AND.',(A1)+
000003E0  5841                     406              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
000003E2  12FC 004C                407              MOVE.B  #'L',(A1)+
000003E6  5241                     408              ADDQ    #1,D1               ; We added 1 byte into D1
000003E8  6000 0026                409              BRA     ANDEA
000003EC                           410              
000003EC  22FC 414E442E            411  ANDWEA      MOVE.L  #'AND.',(A1)+
000003F2  5841                     412              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
000003F4  12FC 0057                413              MOVE.B  #'W',(A1)+
000003F8  5241                     414              ADDQ    #1,D1               ; We added 1 byte into D1
000003FA  6000 0014                415              BRA     ANDEA
000003FE                           416  
000003FE  22FC 414E442E            417  ANDBEA      MOVE.L  #'AND.',(A1)+
00000404  5841                     418              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
00000406  12FC 0042                419              MOVE.B  #'B',(A1)+
0000040A  5241                     420              ADDQ    #1,D1               ; We added 1 byte into D1
0000040C  6000 0002                421              BRA     ANDEA
00000410                           422  
00000410  12FC 0009                423  ANDEA       MOVE.B  #$09,(A1)+          ; Add a spacer into our IOStringLoc
00000414  5241                     424              ADDQ    #1,D1               ; We added 4 bytes, aka 4 spaces
00000416                           425              
00000416  2C05                     426              MOVE.L  D5,D6
00000418  E08E                     427              LSR.L   #8,D6               ; Shift our OpCode a total of 9 bits to the right
0000041A  E28E                     428              LSR.L   #1,D6               ; 
0000041C  0286 00000007            429              ANDI.L  #$07,D6             ; Isolate our data register
00000422                           430              
Line 431 ERROR: Undefined symbol
00000422  4EB9 004DBB8E            431              JSR EADN
00000428                           432              
00000428  12FC 002C                433              MOVE.B  #',',(A1)+
0000042C  5241                     434              ADDQ    #1,D1
0000042E                           435              
0000042E  2C05                     436              MOVE.L  D5,D6               ; Copy our OpCode again
00000430  0286 0000003F            437              ANDI.L  #$3F,D6             ; Isolate our EA bits
00000436                           438              
Line 439 ERROR: Undefined symbol
00000436  4EB9 004DBB8E            439              JSR EAGETSRCEA  
0000043C                           440              
0000043C  4E75                     441              RTS
0000043E                           442              
0000043E  22FC 414E442E            443  ANDLDN      MOVE.L  #'AND.',(A1)+
00000444  5841                     444              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
00000446  12FC 004C                445              MOVE.B  #'L',(A1)+
0000044A  5241                     446              ADDQ    #1,D1               ; We added 1 byte into D1
0000044C  6000 0026                447              BRA ANDDN
00000450                           448              
00000450  22FC 414E442E            449  ANDWDN      MOVE.L  #'AND.',(A1)+
00000456  5841                     450              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
00000458  12FC 0057                451              MOVE.B  #'W',(A1)+
0000045C  5241                     452              ADDQ    #1,D1               ; We added 1 byte into D1
0000045E  6000 0014                453              BRA ANDDN
00000462                           454  
00000462  22FC 414E442E            455  ANDBDN      MOVE.L  #'AND.',(A1)+
00000468  5841                     456              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
0000046A  12FC 0042                457              MOVE.B  #'B',(A1)+
0000046E  5241                     458              ADDQ    #1,D1               ; We added 1 byte into D1
00000470  6000 0002                459              BRA ANDDN  
00000474                           460  
00000474                           461  ANDDN
00000474  12FC 0009                462              MOVE.B  #$09,(A1)+          ; Add a spacer into our IOStringLoc
00000478  5241                     463              ADDQ    #1,D1               ; We added 4 bytes, aka 4 spaces
0000047A                           464              
0000047A  2C05                     465              MOVE.L  D5,D6               ; Copy our OpCode again
0000047C  0286 0000003F            466              ANDI.L  #$3F,D6             ; Isolate our EA bits
00000482                           467              
Line 468 ERROR: Undefined symbol
00000482  4EB9 004DBB8E            468              JSR EAGETSRCEA              
00000488                           469              
00000488  12FC 002C                470              MOVE.B  #',',(A1)+
0000048C  5241                     471              ADDQ    #1,D1
0000048E                           472              
0000048E  2C05                     473              MOVE.L  D5,D6
00000490  E08E                     474              LSR.L   #8,D6               ; Shift our OpCode a total of 9 bits to the right
00000492  E28E                     475              LSR.L   #1,D6               ; 
00000494  0286 00000007            476              ANDI.L  #$07,D6             ; Isolate our data register
0000049A                           477              
Line 478 ERROR: Undefined symbol
0000049A  4EB9 004DBB8E            478              JSR EADN
000004A0                           479              
000004A0  4E75                     480              RTS
000004A2                           481  
000004A2                           482  ; This label determines if the code is either ADD or ADDA           
000004A2  2C05                     483  ADDADDA     MOVE.L  D5,D6               ; Copy D5 into D6
000004A4  EC8E                     484              LSR.L   #6,D6               ; Shift the size bits to the far right
000004A6  0206 0007                485              ANDI.B  #$7,D6              ; Isolate the size bits
000004AA                           486              
000004AA  BC3C 0006                487              CMP.B   #%0110,D6           ; See if D6 is size "%100" through "%110"..
000004AE  6700 0074                488              BEQ     ADDLEA              ; If it is, our OpCode is in the format of..
000004B2  BC3C 0005                489              CMP.B   #%101,D6            ; .. Dn ~ <EA> --> <EA>
000004B6  6700 007E                490              BEQ     ADDWEA
000004BA  BC3C 0004                491              CMP.B   #%100,D6
000004BE  6700 0088                492              BEQ     ADDBEA
000004C2                           493              
000004C2  BC3C 0002                494              CMP.B   #%10,D6             ; See if D6 is size "%000" through "%010"..
000004C6  6700 0026                495              BEQ     ADDLDN              ; If it is, our OpCode is in the format of..
000004CA  BC3C 0001                496              CMP.B   #%01,D6             ; .. <EA> ~ Dn --> Dn
000004CE  6700 0030                497              BEQ     ADDWDN
000004D2  BC3C 0000                498              CMP.B   #%00,D6
000004D6  6700 003A                499              BEQ     ADDBDN              ; == 000 at this point
000004DA                           500              
000004DA  BC3C 0003                501              CMP.B   #%011,D6            ; ADDA Word Operation <EA> -> An 
000004DE  6700 007A                502              BEQ     ADDAW
000004E2  BC3C 0007                503              CMP.B   #%111,D6            ; ADDA Word Operation <EA> -> An  
000004E6  6700 0084                504              BEQ     ADDAL
000004EA  6000 00C0                505              BRA     UNKNOWN
000004EE                           506              
000004EE  22FC 4144442E            507  ADDLDN      MOVE.L  #'ADD.',(A1)+
000004F4  5841                     508              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
000004F6  12FC 004C                509              MOVE.B  #'L',(A1)+
000004FA  5241                     510              ADDQ    #1,D1               ; We added 1 byte into D1
000004FC  6000 FF76                511              BRA ANDDN
00000500                           512              
00000500  22FC 4144442E            513  ADDWDN      MOVE.L  #'ADD.',(A1)+
00000506  5841                     514              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
00000508  12FC 0057                515              MOVE.B  #'W',(A1)+
0000050C  5241                     516              ADDQ    #1,D1               ; We added 1 byte into D1
0000050E  6000 FF64                517              BRA ANDDN
00000512                           518  
00000512  22FC 4144442E            519  ADDBDN      MOVE.L  #'ADD.',(A1)+
00000518  5841                     520              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
0000051A  12FC 0042                521              MOVE.B  #'B',(A1)+
0000051E  5241                     522              ADDQ    #1,D1               ; We added 1 byte into D1
00000520  6000 FF52                523              BRA ANDDN  
00000524                           524              
00000524  22FC 4144442E            525  ADDLEA      MOVE.L  #'ADD.',(A1)+
0000052A  5841                     526              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
0000052C  12FC 004C                527              MOVE.B  #'L',(A1)+
00000530  5241                     528              ADDQ    #1,D1               ; We added 1 byte into D1
00000532  6000 FEDC                529              BRA     ANDEA
00000536                           530              
00000536  22FC 4144442E            531  ADDWEA      MOVE.L  #'ADD.',(A1)+
0000053C  5841                     532              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
0000053E  12FC 0057                533              MOVE.B  #'W',(A1)+
00000542  5241                     534              ADDQ    #1,D1               ; We added 1 byte into D1
00000544  6000 FECA                535              BRA     ANDEA
00000548                           536  
00000548  22FC 4144442E            537  ADDBEA      MOVE.L  #'ADD.',(A1)+
0000054E  5841                     538              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
00000550  12FC 0042                539              MOVE.B  #'B',(A1)+
00000554  5241                     540              ADDQ    #1,D1               ; We added 1 byte into D1
00000556  6000 FEB8                541              BRA     ANDEA
0000055A                           542              
0000055A  22FC 41444441            543  ADDAW       MOVE.L  #'ADDA',(A1)+
00000560  5841                     544              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
00000562  32FC 2E57                545              MOVE.W  #'.W',(A1)+
00000566  5441                     546              ADDQ    #2,D1               ; We added 1 byte into D1
00000568  6000 0014                547              BRA     ADDAN
0000056C                           548              
0000056C  22FC 41444441            549  ADDAL       MOVE.L  #'ADDA',(A1)+
00000572  5841                     550              ADDQ    #4,D1               ; We added 4 new characters to our IOStringLoc
00000574  32FC 2E4C                551              MOVE.W  #'.L',(A1)+
00000578  5441                     552              ADDQ    #2,D1               ; We added 1 byte into D1
0000057A  6000 0002                553              BRA     ADDAN
0000057E                           554         
0000057E                           555  ADDAN
0000057E  12FC 0009                556              MOVE.B  #$09,(A1)+          ; Add a spacer into our IOStringLoc
00000582  5241                     557              ADDQ    #1,D1               ; We added 4 bytes, aka 4 spaces
00000584                           558              
00000584  2C05                     559              MOVE.L  D5,D6               ; Copy our OpCode again
00000586  0286 0000003F            560              ANDI.L  #$3F,D6             ; Isolate our EA bits
0000058C                           561              
Line 562 ERROR: Undefined symbol
0000058C  4EB9 004DBB8E            562              JSR EAGETSRCEA              
00000592                           563              
00000592  12FC 002C                564              MOVE.B  #',',(A1)+
00000596  5241                     565              ADDQ    #1,D1
00000598                           566              
00000598  2C05                     567              MOVE.L  D5,D6
0000059A  E08E                     568              LSR.L   #8,D6               ; Shift our OpCode a total of 9 bits to the right
0000059C  E28E                     569              LSR.L   #1,D6               ; 
0000059E  0286 00000007            570              ANDI.L  #$07,D6             ; Isolate our data register
000005A4                           571              
Line 572 ERROR: Undefined symbol
000005A4  4EB9 004DBB8E            572              JSR EAAN
000005AA                           573                   
000005AA                           574  ; This label determines if the code is either ASd (ASR) or LSd (LSL) or ROd (ROL) 
000005AA                           575  ASLSRO      *(Implement)
000005AA                           576                   
000005AA  4E75                     577              RTS
000005AC                           578  UNKNOWN
000005AC  22FC 3F3F3F3F            579              MOVE.L  #'????',(A1)+
000005B2  5841                     580              ADDQ    #4,D1           ; We added 4 new characters to our IOStringLoc 
000005B4                           581              
000005B4  22FC 20202020            582              MOVE.L  #'    ',(A1)+       ; Add a spacer into our IOStringLoc
000005BA  5841                     583              ADDQ    #4,D1               ; We added 4 bytes, aka 4 spaces
000005BC  32FC 2020                584              MOVE.W  #'  ',(A1)+         ; Add a spacer into our IOStringLoc
000005C0  5441                     585              ADDQ    #2,D1               ; We added 2 bytes, aka 2 spaces
000005C2                           586          
000005C2  4E75                     587              RTS
000005C4                           588  * Put variables and constants here
000005C4                           589  
000005C4                           590  
Line 591 WARNING: END directive missing, starting address not set

17 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDADDA             4A2
ADDAL               56C
ADDAN               57E
ADDAW               55A
ADDBDN              512
ADDBEA              548
ADDI                78
ADDI8               8C
ADDIB               B8
ADDIL               100
ADDIW               DC
ADDLDN              4EE
ADDLEA              524
ADDWDN              500
ADDWEA              536
AND                 3A6
ANDBDN              462
ANDBEA              3FE
ANDDN               474
ANDEA               410
ANDLDN              43E
ANDLEA              3DA
ANDWDN              450
ANDWEA              3EC
ASLSRO              5AA
BCC                 2AC
CLR                 1EA
CMP                 35A
CNRJML              182
DIVU                2B0
JSR                 214
LEA                 2A0
MOVEB               124
MOVEL               144
MOVEM               220
MOVEML              246
MOVEMOP             24C
MOVEMPOSTI          284
MOVEMPRED           268
MOVEMW              23C
MOVEOP              154
MOVEQ               2AE
MOVEW               134
MULS                36E
MULSAND             35C
NOP                 1EC
OPGETCODE           0
RTS                 200
SUB                 2B2
SUBBDN              348
SUBBEA              312
SUBLDN              324
SUBLEA              2EE
SUBWDN              336
SUBWEA              300
UNKNOWN             5AC
