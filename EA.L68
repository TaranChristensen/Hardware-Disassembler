00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 3/13/2016 9:30:55 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : EA
00000000                             3  * Written by : Circles
00000000                             4  * Date       : ##/##/16
00000000                             5  * Description: Effective Address File
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  * Put program code here
00000000                             9  
00000000                            10  ; It is assumed that D6 contains the bits for the EA, algined to the far right. D5 contains
00000000                            11  ;  the original full op-code being reffered to. We assume that A2 contains the address 
00000000                            12  ;  pointing to the start of our EA address (if applicable), and we assume that A1 contains
00000000                            13  ;  the address pointing to our IOStringLoc. D1 contains the current length to be printed from A1
00000000                            14  
00000000                            15  ; For this method, D6 is in the format of: <3 bits Src Mode><3 bits Src Reg> 
00000000                            16  EAGETSRCEA  
00000000  E69E                      17      ROR.L   #3,D6       ; Rotate our bits 3 to the right
00000002  1E06                      18      MOVE.B  D6,D7       ; Store the mode of the EA in D7
00000004  E79E                      19      ROL.L   #3,D6       ; Rotate our 3 bits back
00000006  0286 00000007             20      ANDI.L  #$0007,D6   ; Isolate the 3 rightmost bits as 'Reg'
0000000C  BE3C 0000                 21      CMP.B   #0,D7       ; See if the mode == '000'
00000010  6700 006A                 22      BEQ     EADN
00000014                            23  
00000014  BE3C 0001                 24      CMP.B   #1,D7       ; See if the mode == '001'
00000018  6700 0070                 25      BEQ     EAAN        ; Address Register Direct
0000001C                            26      
0000001C  BE3C 0002                 27      CMP.B   #2,D7       ; See if the mode == '010'
00000020  6700 0076                 28      BEQ     EAANI       ; Address Register Indirect
00000024                            29      
00000024  BE3C 0003                 30      CMP.B   #3,D7       ; See if the mode == '011'
00000028  6700 0084                 31      BEQ     EAAPOST     ; Address Register Indirect with Post increment
0000002C                            32      
0000002C  BE3C 0004                 33      CMP.B   #4,D7       ; See if the mode == '100'
00000030  6700 0096                 34      BEQ     EAAPRE      ; Address Register Indirect with Pre increment
00000034                            35      
00000034  BE3C 0007                 36      CMP.B   #7,D7       ; See if the mode == '111' 
00000038  6700 010A                 37      BEQ     EA111       ; Determine if (Immediate Data, Aboslute Word or Long Address)
0000003C                            38  
0000003C  6000 0360                 39      BRA     EAUNKN
00000040                            40  
00000040                            41  ; For this method, D6 is in the format of: <3 bits Dst Reg><3 bits Dst Mode> 
00000040                            42  EAGETDSTEA  
00000040  1E06                      43      MOVE.B  D6,D7       ; Store the right-most byte into D7
00000042  CE3C 0007                 44      AND.B   #$07,D7     ; Isolate 3 rightmost bits as 'Mode'
00000046  E68E                      45      LSR.L   #3,D6       ; Shift D6 to the right 3 bits (D6 Byte = 'Reg')
00000048  BE3C 0000                 46      CMP.B   #0,D7       ; See if the mode == '000'
0000004C  6700 002E                 47      BEQ     EADN
00000050                            48  
00000050  BE3C 0001                 49      CMP.B   #1,D7       ; See if the mode == '001'
00000054  6700 0034                 50      BEQ     EAAN        ; Address Register Direct
00000058                            51      
00000058  BE3C 0002                 52      CMP.B   #2,D7       ; See if the mode == '010'
0000005C  6700 003A                 53      BEQ     EAANI       ; Address Register Indirect
00000060                            54      
00000060  BE3C 0003                 55      CMP.B   #3,D7       ; See if the mode == '011'
00000064  6700 0048                 56      BEQ     EAAPOST     ; Address Register Indirect with Post increment
00000068                            57      
00000068  BE3C 0004                 58      CMP.B   #4,D7       ; See if the mode == '100'
0000006C  6700 005A                 59      BEQ     EAAPRE      ; Address Register Indirect with Pre increment
00000070                            60      
00000070  BE3C 0007                 61      CMP.B   #7,D7       ; See if the mode == '111' 
00000074  6700 00CE                 62      BEQ     EA111       ; Determine if (Immediate Data, Aboslute Word or Long Address)
00000078                            63  
00000078  6000 0324                 64      BRA     EAUNKN
0000007C                            65           
0000007C                            66  ;If the EA is a Dn EA    
0000007C                            67  ;This method assume D6 contains the Reg for Dn  
0000007C                            68  EADN
0000007C  12FC 0044                 69      MOVE.B  #'D',(A1)+
00000080  0606 0030                 70      ADD.B   #48,D6      ; Add 48 into D6 to turn num 0 into ASCII 0
00000084  12C6                      71      MOVE.B  D6,(A1)+
00000086  5441                      72      ADDQ    #2,D1
00000088  4E75                      73      RTS
0000008A                            74  ;If the EA is a An EA    
0000008A                            75  ;This method assume D6 contains the Reg for An  
0000008A                            76  EAAN
0000008A  12FC 0041                 77      MOVE.B  #'A',(A1)+
0000008E  0606 0030                 78      ADD.B   #48,D6      ; Add 48 into D6 to turn num 0 into ASCII 0
00000092  12C6                      79      MOVE.B  D6,(A1)+
00000094  5441                      80      ADDQ    #2,D1
00000096  4E75                      81      RTS
00000098                            82  
00000098                            83  ;If the EA is a (An) EA    
00000098                            84  ;This method assume D6 contains the Reg for (An)  
00000098                            85  EAANI
00000098  12FC 0028                 86      MOVE.B  #'(',(A1)+
0000009C  12FC 0041                 87      MOVE.B  #'A',(A1)+
000000A0  0606 0030                 88      ADD.B   #48,D6      ; Add 48 into D6 to turn num 0 into ASCII 0
000000A4  12C6                      89      MOVE.B  D6,(A1)+
000000A6  12FC 0029                 90      MOVE.B  #')',(A1)+
000000AA  5841                      91      ADDQ    #4,D1
000000AC  4E75                      92      RTS
000000AE                            93  ;If the EA is a (An)+ EA    
000000AE                            94  ;This method assume D6 contains the Reg for (An)+  
000000AE                            95  EAAPOST
000000AE  12FC 0028                 96      MOVE.B  #'(',(A1)+
000000B2  12FC 0041                 97      MOVE.B  #'A',(A1)+
000000B6  0606 0030                 98      ADD.B   #48,D6      ; Add 48 into D6 to turn num 0 into ASCII 0
000000BA  12C6                      99      MOVE.B  D6,(A1)+
000000BC  12FC 0029                100      MOVE.B  #')',(A1)+
000000C0  12FC 002B                101      MOVE.B  #'+',(A1)+
000000C4  5A41                     102      ADDQ    #5,D1
000000C6  4E75                     103      RTS
000000C8                           104  ;If the EA is a -(An) EA    
000000C8                           105  ;This method assume D6 contains the Reg for -(An) 
000000C8                           106  EAAPRE
000000C8  12FC 002D                107      MOVE.B  #'-',(A1)+
000000CC  12FC 0028                108      MOVE.B  #'(',(A1)+
000000D0  12FC 0041                109      MOVE.B  #'A',(A1)+
000000D4  0606 0030                110      ADD.B   #48,D6      ; Add 48 into D6 to turn num 0 into ASCII 0
000000D8  12C6                     111      MOVE.B  D6,(A1)+
000000DA  12FC 0029                112      MOVE.B  #')',(A1)+
000000DE  5A41                     113      ADDQ    #5,D1
000000E0  4E75                     114      RTS 
000000E2                           115  ;If the EA is a #<data> EA    
000000E2                           116  ;This method assume D6 contains the Reg for #<data>  
000000E2                           117  EAID
000000E2  32FC 2324                118      MOVE.W  #'#$',(A1)+
000000E6  5441                     119      ADDQ    #2,D1
000000E8  B03C 0002                120      CMP.B   #2,D0
000000EC  6E00 000E                121      BGT     EAIDL
000000F0  3C1A                     122      MOVE.W  (A2)+,D6
000000F2  4244                     123      CLR     D4
000000F4  4EB9 0000015A            124      JSR     EAHEXtoASCII
000000FA  4E75                     125      RTS
000000FC                           126      
000000FC                           127  ;If the EA is a #<data> EA    
000000FC                           128  ;This method assume D6 contains the Reg for #<data> of size Long
000000FC                           129  EAIDL
000000FC  2C1A                     130      MOVE.L  (A2)+,D6
000000FE  4244                     131      CLR     D4
00000100  4846                     132      SWAP    D6
00000102  4EB9 0000015A            133      JSR     EAHEXtoASCII
00000108  4846                     134      SWAP    D6
0000010A  4244                     135      CLR     D4
0000010C  4EB9 0000015A            136      JSR     EAHEXtoASCII
00000112  4E75                     137      RTS
00000114                           138  
00000114                           139  ;If the EA is a (xxx).W EA    
00000114                           140  ;This method assume D6 contains the Reg for (xxx).W  
00000114                           141  EAAWA
00000114  12FC 0024                142      MOVE.B  #'$',(A1)+
00000118  5241                     143      ADDQ    #1,D1
0000011A  3C1A                     144      MOVE.W  (A2)+,D6   ; Push our next Word value into D6
0000011C                           145      ; Push the ASCII equivlent characters of D6-- only the
0000011C                           146      ;   first Word's worth (our entire Word we just acquired)
0000011C  4244                     147      CLR     D4
0000011E  4EB9 0000015A            148      JSR     EAHEXtoASCII
00000124                           149      
00000124  4E75                     150      RTS
00000126                           151  ;If the EA is a (xxx).L EA    
00000126                           152  ;This method assume D6 contains the Reg for (xxx).L  
00000126                           153  EAALA
00000126  12FC 0024                154      MOVE.B  #'$',(A1)+
0000012A  5241                     155      ADDQ    #1,D1
0000012C  2C1A                     156      MOVE.L  (A2)+,D6   ; Push our next Long value into D6
0000012E                           157      ; Push the ASCII equivlent characters of D6-- only the
0000012E                           158      ;   first Word's worth of our Long
0000012E  4244                     159      CLR     D4         ; Clear our counter
00000130  4846                     160      SWAP    D6         ; Flip the high-order Word with the Low-order
00000132  4EB9 0000015A            161      JSR     EAHEXtoASCII
00000138  4846                     162      SWAP    D6         ; Flip the high-order Word with the Low-order
0000013A                           163      ; Print the second half of the Long, too
0000013A  4244                     164      CLR     D4
0000013C  4EB9 0000015A            165      JSR     EAHEXtoASCII
00000142                           166      
00000142  4E75                     167      RTS
00000144                           168  ;If the EA Mode = 111, Determine EA    
00000144                           169  ;This method assume D6 contains the Reg for EA  
00000144                           170  EA111
00000144  BC3C 0000                171      CMP.B #0,D6
00000148  67CA                     172      BEQ     EAAWA       ; Absolute Word Address 
0000014A  BC3C 0001                173      CMP.B #1,D6
0000014E  67D6                     174      BEQ     EAALA       ; Absolute Long Address 
00000150  BC3C 0004                175      CMP.B #4,D6
00000154  678C                     176      BEQ     EAID        ; Immediate Data 
00000156                           177      *-----------------------------------------------let fall through? it shouldn't RTS right?
00000156  6000 0246                178      BRA     EAUNKN
0000015A                           179      
0000015A                           180  ; Uses D6 as a storage, D3 as a go-between, and D4 as a counter..
0000015A                           181  ;  This operates on the low-order word of D6, and pushes exactly 4 
0000015A                           182  ;  characters into IOStringLoc, converted from HEX of D6's nybble,
0000015A                           183  ;  to ASCII in IOStringLoc
0000015A  5244                     184  EAHEXtoASCII    ADDQ    #1,D4
0000015C  E95E                     185                  ROL.W   #4,D6              Get the left-most nyblle to the front..
0000015E  1606                     186                  MOVE.B  D6,D3              .. Put the front-most byte into D3    
00000160  C63C 000F                187                  AND.B   #$0F,D3            Distill D3 down to the original left-most nybble
00000164  B63C 0009                188                  CMP.B   #9,D3              See if our number is greater than 9..
00000168  6F00 0004                189                  BLE     EADIGIT            If it is 9 or less, it's a digit..
0000016C  5E03                     190                  ADD.B   #7,D3              Otherwise it is a digit, and needs an additional 7
0000016E  0603 0030                191  EADIGIT         ADD.B   #48,D3             We now have the nybble's ASCII code
00000172  12C3                     192                  MOVE.B  D3,(A1)+           Move the ASCII code into the output string at A1
00000174  B83C 0004                193                  CMP.B   #4,D4              See if we've read all the characters
00000178  66E0                     194                  BNE.S   EAHEXtoASCII       Continue if we haven't
0000017A                           195                  
0000017A  5841                     196                  ADDQ    #4,D1
0000017C  4E75                     197                  RTS
0000017E                           198      
0000017E                           199  
0000017E                           200  ; MOVEM's (A7)+,A0-A6,D0-D7 format
0000017E                           201  ; Gets the follow-up WORD in order to process it
0000017E                           202  EAMOVEMPOSTI ; Initilize variables for An and MOVEM
0000017E  3A1A                     203      MOVE.W  (A2)+,D5
00000180  2C05                     204      MOVE.L  D5,D6
00000182  EE9E                     205      ROR.L   #7,D6                   ; Rotate our A bits to the front
00000184  4240                     206      CLR     D0
00000186  4247                     207      CLR     D7
00000188  2E3C 000000FF            208      MOVE.L  #$FF,D7                 ; Initlize our D7 to -1 
0000018E                           209  EAMOVEMPOSTIAN
0000018E  4EB9 00000258            210      JSR     EAMOVEMPOSTILOOPSTART   ; Find our starting An
00000194  BE7C 0008                211      CMP     #8,D7
00000198  6C00 0052                212      BGE     EAMOVEMPOSTIANEND       ; If A8, branch to AnEnd
0000019C  4EB9 00000282            213      JSR     EAMOVEMSLASH            ; Add a slash, if we need to
000001A2                           214      
000001A2  12FC 0041                215      MOVE.B  #'A',(A1)+
000001A6  0647 0030                216      ADD.W   #48,D7                  ; Convert D7 to ASCII equivlent
000001AA  12C7                     217      MOVE.B  D7,(A1)+
000001AC  5441                     218      ADDQ    #2,D1                   ; Add our number into IOStringLoc
000001AE  0447 002F                219      SUB     #47,D7                  ; Equilize D7
000001B2                           220      
000001B2                           221      ; Check immediately next number to see if there is an ending
000001B2  103C 0001                222      MOVE.B  #1,D0                   ; Set our slash equal to TRUE
000001B6  BE7C 0008                223      CMP     #8,D7
000001BA  6C00 0030                224      BGE     EAMOVEMPOSTIANEND       ; If A8, branch to AnEnd
000001BE  E29E                     225      ROR.L   #1,D6                   ; See if our next bit is set
000001C0  0806 0000                226      BTST    #$00,D6                 ; If it isn't set, we have no '-An'..
000001C4  67C8                     227      BEQ     EAMOVEMPOSTIAN          ; .. Look for our next /An
000001C6                           228      
000001C6  4EB9 0000026C            229      JSR     EAMOVEMPOSTILOOPEND
000001CC  BE7C 0008                230      CMP     #8,D7
000001D0  6C00 001A                231      BGE     EAMOVEMPOSTIANEND       ; If A8, branch to AnEnd
000001D4  12FC 002D                232      MOVE.B  #'-',(A1)+
000001D8  12FC 0041                233      MOVE.B  #'A',(A1)+
000001DC  0647 0030                234      ADD.W    #48,D7                  ; Convert D7 to ASCII equivlent
000001E0  12C7                     235      MOVE.B  D7,(A1)+
000001E2  5641                     236      ADDQ    #3,D1                   ; Add our number into IOStringLoc
000001E4  0447 0030                237      SUB     #48,D7                  ; Equilize D7
000001E8                           238      
000001E8  5247                     239      ADDQ    #1,D7                   ; Account for our extra rotation in LoopEnd
000001EA  60A2                     240      BRA     EAMOVEMPOSTIAN
000001EC                           241      
000001EC                           242  EAMOVEMPOSTIANEND ; Initilize variables for Dn
000001EC  2C05                     243      MOVE.L  D5,D6
000001EE  4247                     244      CLR     D7
000001F0  2E3C 000000FF            245      MOVE.L  #$FF,D7                 ; Initlize our D7 to -1 
000001F6  E39E                     246      ROL.L   #1,D6                   ; Initlize our mask to -1
000001F8                           247  EAMOVEMPOSTIDN
000001F8  4EB9 00000258            248      JSR     EAMOVEMPOSTILOOPSTART   ; Find our starting Dn
000001FE  BE7C 0008                249      CMP     #8,D7
00000202  6C00 0052                250      BGE     EAMOVEMPOSTIEND         ; If D8, branch to End
00000206  4EB9 00000282            251      JSR     EAMOVEMSLASH            ; Add a slash, if we need to
0000020C                           252      
0000020C  12FC 0044                253      MOVE.B  #'D',(A1)+
00000210  0647 0030                254      ADD.W   #48,D7                  ; Convert D7 to ASCII equivlent
00000214  12C7                     255      MOVE.B  D7,(A1)+
00000216  5441                     256      ADDQ    #2,D1                   ; Add our number into IOStringLoc
00000218  0447 002F                257      SUB     #47,D7                  ; Equilize D7
0000021C                           258      
0000021C                           259      ; Check immediately next number to see if there is an ending
0000021C  103C 0001                260      MOVE.B  #1,D0                   ; Set our slash equal to TRUE
00000220  BE7C 0008                261      CMP     #8,D7
00000224  6C00 0030                262      BGE     EAMOVEMPOSTIEND         ; If D8, branch to End
00000228  E29E                     263      ROR.L   #1,D6                   ; See if our next bit is set
0000022A  0806 0000                264      BTST    #$00,D6                 ; If it isn't set, we have no '-Dn'..
0000022E  67C8                     265      BEQ     EAMOVEMPOSTIDN          ; .. Look for our next /Dn
00000230                           266      
00000230  4EB9 0000026C            267      JSR     EAMOVEMPOSTILOOPEND
00000236  BE7C 0008                268      CMP     #8,D7
0000023A  6C00 001A                269      BGE     EAMOVEMPOSTIEND         ; If D8, branch to End
0000023E  12FC 002D                270      MOVE.B  #'-',(A1)+
00000242  12FC 0044                271      MOVE.B  #'D',(A1)+
00000246  0647 0030                272      ADD.W    #48,D7                  ; Convert D7 to ASCII equivlent
0000024A  12C7                     273      MOVE.B  D7,(A1)+
0000024C  5641                     274      ADDQ    #3,D1                   ; Add our number into IOStringLoc
0000024E  0447 0030                275      SUB     #48,D7                  ; Equilize D7
00000252                           276      
00000252  5247                     277      ADDQ    #1,D7                   ; Account for our extra rotation in LoopEnd
00000254  60A2                     278      BRA     EAMOVEMPOSTIDN
00000256                           279  
00000256                           280  EAMOVEMPOSTIEND
00000256  4E75                     281      RTS
00000258                           282      
00000258                           283  EAMOVEMPOSTILOOPSTART
00000258  5207                     284      ADDQ.B  #1,D7       ; Itterate D7
0000025A  E29E                     285      ROR.L   #1,D6       ; Rotate one bit to the right  
0000025C  BE3C 0008                286      CMP.B   #8,D7       ; Check if we've hit A8
00000260  6C00 0030                287      BGE     EAMOVEMSLASHEND      ; If we have, break the loop
00000264  0806 0000                288      BTST    #$00,D6     ; Check the far right bit
00000268  67EE                     289      BEQ     EAMOVEMPOSTILOOPSTART       ; If it is 0, continue checking 
0000026A  4E75                     290      RTS
0000026C                           291      
0000026C                           292  EAMOVEMPOSTILOOPEND
0000026C  5207                     293      ADDQ.B  #1,D7       ; Itterate D7
0000026E  E29E                     294      ROR.L   #1,D6       ; Rotate one bit to the right  
00000270  BE3C 0009                295      CMP.B   #9,D7       ; Check if we've hit A8
00000274  6C00 001C                296      BGE     EAMOVEMSLASHEND      ; If we have, break the loop
00000278  0806 0000                297      BTST    #$00,D6     ; Check the far right bit
0000027C  66EE                     298      BNE     EAMOVEMPOSTILOOPEND       ; If it isn't 0, continue checking 
0000027E  5347                     299      SUBQ    #1,D7
00000280  4E75                     300      RTS
00000282                           301      
00000282                           302  EAMOVEMSLASH
00000282  B07C 0001                303      CMP     #1,D0       ; If D0 != 1
00000286  6600 000A                304      BNE     EAMOVEMSLASHEND  ; RTS
0000028A  4240                     305      CLR     D0          ; Reset our slash
0000028C  12FC 002F                306      MOVE.B  #'/',(A1)+  ; Otherwise Add a slash
00000290  5241                     307      ADDQ    #1,D1  
00000292                           308  EAMOVEMSLASHEND     
00000292  4E75                     309      RTS
00000294                           310      
00000294                           311  ; MOVEM's A0-A6,D0-D7,-(An) format
00000294                           312  ; Gets the follow-up WORD in order to process it
00000294                           313  EAMOVEMPRED ; Initilize variables for An and MOVEM
00000294  48E7 0400                314      MOVEM.L D5,-(SP)                ; Save our original OpCode for later
00000298  3A1A                     315      MOVE.W  (A2)+,D5
0000029A  2C05                     316      MOVE.L  D5,D6
0000029C  E09E                     317      ROR.L   #8,D6                   ; Rotate our A bits to the front
0000029E  4240                     318      CLR     D0
000002A0  4247                     319      CLR     D7
000002A2  2E3C 000000FF            320      MOVE.L  #$FF,D7                 ; Initlize our D7 to -1 
000002A8                           321  EAMOVEMPREDAN
000002A8  4EB9 00000374            322      JSR     EAMOVEMPREDLOOPSTART    ; Find our starting An
000002AE  BE7C 0008                323      CMP     #8,D7
000002B2  6C00 0050                324      BGE     EAMOVEMPREDANEND        ; If A8, branch to AnEnd
000002B6  4EB8 0282                325      JSR     EAMOVEMSLASH            ; Add a slash, if we need to
000002BA                           326      
000002BA  12FC 0041                327      MOVE.B  #'A',(A1)+
000002BE  0647 0030                328      ADD.W   #48,D7                  ; Convert D7 to ASCII equivlent
000002C2  12C7                     329      MOVE.B  D7,(A1)+
000002C4  5441                     330      ADDQ    #2,D1                   ; Add our number into IOStringLoc
000002C6  0447 002F                331      SUB     #47,D7                  ; Equilize D7
000002CA                           332      
000002CA                           333      ; Check immediately next number to see if there is an ending
000002CA  103C 0001                334      MOVE.B  #1,D0                   ; Set our slash equal to TRUE
000002CE  BE7C 0008                335      CMP     #8,D7
000002D2  6C00 0030                336      BGE     EAMOVEMPREDANEND        ; If A8, branch to AnEnd
000002D6  E39E                     337      ROL.L   #1,D6                   ; See if our next bit is set
000002D8  0806 0000                338      BTST    #$00,D6                 ; If it isn't set, we have no '-An'..
000002DC  67CA                     339      BEQ     EAMOVEMPREDAN           ; .. Look for our next /An
000002DE                           340      
000002DE  4EB9 00000388            341      JSR     EAMOVEMPREDLOOPEND
000002E4  BE7C 0008                342      CMP     #8,D7
000002E8  6C00 001A                343      BGE     EAMOVEMPREDANEND        ; If A8, branch to AnEnd
000002EC  12FC 002D                344      MOVE.B  #'-',(A1)+
000002F0  12FC 0041                345      MOVE.B  #'A',(A1)+
000002F4  0647 0030                346      ADD.W    #48,D7                 ; Convert D7 to ASCII equivlent
000002F8  12C7                     347      MOVE.B  D7,(A1)+
000002FA  5641                     348      ADDQ    #3,D1                   ; Add our number into IOStringLoc
000002FC  0447 0030                349      SUB     #48,D7                  ; Equilize D7
00000300                           350      
00000300  5247                     351      ADDQ    #1,D7                   ; Account for our extra rotation in LoopEnd
00000302  60A4                     352      BRA     EAMOVEMPREDAN
00000304                           353      
00000304                           354  EAMOVEMPREDANEND ; Initilize variables for Dn
00000304  2C05                     355      MOVE.L  D5,D6
00000306  4247                     356      CLR     D7
00000308  2E3C 000000FF            357      MOVE.L  #$FF,D7                 ; Initlize our D7 to -1 
0000030E  E19E                     358      ROL.L   #8,D6                   ; Initlize our mask to -1
00000310  E19E                     359      ROL.L   #8,D6                   ;
00000312                           360  EAMOVEMPREDDN
00000312  4EB9 00000374            361      JSR     EAMOVEMPREDLOOPSTART   ; Find our starting Dn
00000318  BE7C 0008                362      CMP     #8,D7
0000031C  6C00 0050                363      BGE     EAMOVEMPREDEND          ; If D8, branch to End
00000320  4EB8 0282                364      JSR     EAMOVEMSLASH            ; Add a slash, if we need to
00000324                           365      
00000324  12FC 0044                366      MOVE.B  #'D',(A1)+
00000328  0647 0030                367      ADD.W   #48,D7                  ; Convert D7 to ASCII equivlent
0000032C  12C7                     368      MOVE.B  D7,(A1)+
0000032E  5441                     369      ADDQ    #2,D1                   ; Add our number into IOStringLoc
00000330  0447 002F                370      SUB     #47,D7                  ; Equilize D7
00000334                           371      
00000334                           372      ; Check immediately next number to see if there is an ending
00000334  103C 0001                373      MOVE.B  #1,D0                   ; Set our slash equal to TRUE
00000338  BE7C 0008                374      CMP     #8,D7
0000033C  6C00 0030                375      BGE     EAMOVEMPREDEND          ; If D8, branch to End
00000340  E39E                     376      ROL.L   #1,D6                   ; See if our next bit is set
00000342  0806 0000                377      BTST    #$00,D6                 ; If it isn't set, we have no '-Dn'..
00000346  67CA                     378      BEQ     EAMOVEMPREDDN           ; .. Look for our next /Dn
00000348                           379      
00000348  4EB9 00000388            380      JSR     EAMOVEMPREDLOOPEND
0000034E  BE7C 0008                381      CMP     #8,D7
00000352  6C00 001A                382      BGE     EAMOVEMPREDEND          ; If D8, branch to End
00000356  12FC 002D                383      MOVE.B  #'-',(A1)+
0000035A  12FC 0044                384      MOVE.B  #'D',(A1)+
0000035E  0647 0030                385      ADD.W   #48,D7                  ; Convert D7 to ASCII equivlent
00000362  12C7                     386      MOVE.B  D7,(A1)+
00000364  5641                     387      ADDQ    #3,D1                   ; Add our number into IOStringLoc
00000366  0447 0030                388      SUB     #48,D7                  ; Equilize D7
0000036A                           389      
0000036A  5247                     390      ADDQ    #1,D7                   ; Account for our extra rotation in LoopEnd
0000036C  60A4                     391      BRA     EAMOVEMPREDDN
0000036E                           392  
0000036E                           393  EAMOVEMPREDEND
0000036E  4CDF 0020                394      MOVEM.L (SP)+,D5
00000372  4E75                     395      RTS
00000374                           396      
00000374                           397  EAMOVEMPREDLOOPSTART
00000374  5207                     398      ADDQ.B  #1,D7       ; Itterate D7
00000376  E39E                     399      ROL.L   #1,D6       ; Rotate one bit to the right  
00000378  BE3C 0008                400      CMP.B   #8,D7       ; Check if we've hit A8
0000037C  6C00 FF14                401      BGE     EAMOVEMSLASHEND      ; If we have, break the loop
00000380  0806 0000                402      BTST    #$00,D6     ; Check the far right bit
00000384  67EE                     403      BEQ     EAMOVEMPREDLOOPSTART       ; If it is 0, continue checking 
00000386  4E75                     404      RTS
00000388                           405      
00000388                           406  EAMOVEMPREDLOOPEND
00000388  5207                     407      ADDQ.B  #1,D7       ; Itterate D7
0000038A  E39E                     408      ROL.L   #1,D6       ; Rotate one bit to the right  
0000038C  BE3C 0009                409      CMP.B   #9,D7       ; Check if we've hit A8
00000390  6C00 FF00                410      BGE     EAMOVEMSLASHEND      ; If we have, break the loop
00000394  0806 0000                411      BTST    #$00,D6     ; Check the far right bit
00000398  66EE                     412      BNE     EAMOVEMPREDLOOPEND       ; If it isn't 0, continue checking 
0000039A  5347                     413      SUBQ    #1,D7
0000039C  4E75                     414      RTS
0000039E                           415      
0000039E                           416  ; If the EA is unknown
0000039E                           417  EAUNKN
0000039E  12FC 003C                418      MOVE.B  #'<',(A1)+  ; We did this byte-by-byte in case A1 is at an odd register
000003A2  12FC 0045                419      MOVE.B  #'E',(A1)+
000003A6  12FC 0041                420      MOVE.B  #'A',(A1)+
000003AA  12FC 003E                421      MOVE.B  #'>',(A1)+
000003AE  5841                     422      ADDQ    #4,D1
000003B0  4E75                     423      RTS
000003B2                           424  
000003B2                           425  * Put variables and constants here
000003B2                           426  
000003B2                           427  
000003B2                           428  
000003B2                           429  
000003B2                           430  
000003B2                           431  
000003B2                           432  
000003B2                           433  
000003B2                           434  
Line 435 WARNING: END directive missing, starting address not set

No errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
EA111               144
EAALA               126
EAAN                8A
EAANI               98
EAAPOST             AE
EAAPRE              C8
EAAWA               114
EADIGIT             16E
EADN                7C
EAGETDSTEA          40
EAGETSRCEA          0
EAHEXTOASCII        15A
EAID                E2
EAIDL               FC
EAMOVEMPOSTI        17E
EAMOVEMPOSTIAN      18E
EAMOVEMPOSTIANEND   1EC
EAMOVEMPOSTIDN      1F8
EAMOVEMPOSTIEND     256
EAMOVEMPOSTILOOPEND  26C
EAMOVEMPOSTILOOPSTART  258
EAMOVEMPRED         294
EAMOVEMPREDAN       2A8
EAMOVEMPREDANEND    304
EAMOVEMPREDDN       312
EAMOVEMPREDEND      36E
EAMOVEMPREDLOOPEND  388
EAMOVEMPREDLOOPSTART  374
EAMOVEMSLASH        282
EAMOVEMSLASHEND     292
EAUNKN              39E
